
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 14 15:48:43 COT 2023
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 14 15:48:43 COT 2023
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\002\002\004\000\002\010\006\000\002\010" +
    "\006\000\002\010\010\000\002\010\006\000\002\010\012" +
    "\000\002\010\012\000\002\010\014\000\002\010\012\000" +
    "\002\010\012\000\002\010\014\000\002\010\014\000\002" +
    "\010\016\000\002\010\016\000\002\010\016\000\002\010" +
    "\017\000\002\010\020\000\002\010\022\000\002\002\011" +
    "\000\002\002\010\000\002\002\010\000\002\002\007\000" +
    "\002\002\011\000\002\002\010\000\002\002\013\000\002" +
    "\002\012\000\002\002\012\000\002\002\011\000\002\002" +
    "\011\000\002\002\010\000\002\002\012\000\002\002\011" +
    "\000\002\002\014\000\002\002\013\000\002\002\002\000" +
    "\002\011\004\000\002\011\004\000\002\011\005\000\002" +
    "\011\006\000\002\012\003\000\002\012\004\000\002\012" +
    "\005\000\002\012\006\000\002\012\007\000\002\012\010" +
    "\000\002\012\011\000\002\012\012\000\002\012\013\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\004\006\000\002\004\010\000\002\004\010\000" +
    "\002\004\012\000\002\004\007\000\002\004\011\000\002" +
    "\004\011\000\002\004\011\000\002\004\013\000\002\004" +
    "\013\000\002\004\013\000\002\004\015\000\002\004\005" +
    "\000\002\004\007\000\002\004\011\000\002\004\006\000" +
    "\002\004\012\000\002\004\012\000\002\004\016\000\002" +
    "\004\006\000\002\004\011\000\002\004\011\000\002\004" +
    "\014\000\002\004\012\000\002\004\012\000\002\004\016" +
    "\000\002\004\006\000\002\004\011\000\002\004\011\000" +
    "\002\004\014\000\002\004\012\000\002\004\012\000\002" +
    "\004\016\000\002\004\005\000\002\004\010\000\002\004" +
    "\011\000\002\004\005\000\002\004\010\000\002\004\011" +
    "\000\002\004\005\000\002\004\007\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\004\012\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\007\000\002\004\010\000\002\004\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\013\006\000\002" +
    "\013\006\000\002\013\006\000\002\013\006\000\002\013" +
    "\006\000\002\013\006\000\002\013\011\000\002\013\011" +
    "\000\002\013\011\000\002\013\011\000\002\013\011\000" +
    "\002\013\013\000\002\013\013\000\002\013\011\000\002" +
    "\013\013\000\002\013\013\000\002\013\011\000\002\013" +
    "\013\000\002\013\013\000\002\013\011\000\002\013\013" +
    "\000\002\013\013\000\002\013\011\000\002\013\013\000" +
    "\002\013\013\000\002\013\011\000\002\013\015\000\002" +
    "\013\015\000\002\013\015\000\002\013\015\000\002\013" +
    "\011\000\002\013\011\000\002\013\011\000\002\013\011" +
    "\000\002\013\011\000\002\013\011\000\002\013\011\000" +
    "\002\013\011\000\002\013\011\000\002\013\011\000\002" +
    "\013\011\000\002\013\011\000\002\013\011\000\002\013" +
    "\011\000\002\013\011\000\002\013\015\000\002\013\013" +
    "\000\002\013\013\000\002\013\011\000\002\013\015\000" +
    "\002\013\013\000\002\013\013\000\002\013\011\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\006\011\000\002\020\003" +
    "\000\002\020\003\000\002\020\004\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\006\000\002" +
    "\020\007\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\007\000\002\020\010\000\002\025\003" +
    "\000\002\025\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\007\015\000\002\015\011" +
    "\000\002\016\013\000\002\017\011\000\002\021\012\000" +
    "\002\021\011\000\002\005\007\000\002\005\007\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\026\006\000\002\026\010\000\002\026\011" +
    "\000\002\026\012\000\002\026\014\000\002\027\003\000" +
    "\002\027\004\000\002\014\006\000\002\014\010\000\002" +
    "\036\010\000\002\036\011\000\002\036\012\000\002\036" +
    "\013\000\002\036\013\000\002\036\014\000\002\036\015" +
    "\000\002\036\016\000\002\037\007\000\002\037\010\000" +
    "\002\037\007\000\002\037\010\000\002\037\005\000\002" +
    "\030\006\000\002\030\010\000\002\030\011\000\002\030" +
    "\012\000\002\030\013\000\002\031\003\000\002\033\005" +
    "\000\002\033\006\000\002\033\010\000\002\035\006\000" +
    "\002\035\010\000\002\035\012\000\002\035\014\000\002" +
    "\034\003\000\002\034\004\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02e0\000\016\002\uffdf\017\005\101\004\102\010\103" +
    "\007\113\012\001\002\000\004\102\u02dc\001\002\000\004" +
    "\102\u02cf\001\002\000\010\017\u02ab\101\u02ac\102\u02ad\001" +
    "\002\000\004\104\u02a8\001\002\000\004\073\106\001\002" +
    "\000\004\002\105\001\002\000\004\036\013\001\002\000" +
    "\006\105\015\107\014\001\002\000\006\037\033\063\034" +
    "\001\002\000\004\037\016\001\002\000\014\017\000\101" +
    "\000\102\000\103\017\113\020\001\002\000\004\104\030" +
    "\001\002\000\004\036\021\001\002\000\004\107\022\001" +
    "\002\000\004\037\023\001\002\000\012\017\ufff9\101\ufff9" +
    "\102\ufff9\103\024\001\002\000\004\104\025\001\002\000" +
    "\004\106\026\001\002\000\004\062\027\001\002\000\010" +
    "\017\ufff4\101\ufff4\102\ufff4\001\002\000\004\106\031\001" +
    "\002\000\004\062\032\001\002\000\010\017\ufffc\101\ufffc" +
    "\102\ufffc\001\002\000\014\017\uffff\101\uffff\102\uffff\103" +
    "\062\113\063\001\002\000\004\107\035\001\002\000\004" +
    "\037\036\001\002\000\014\017\ufffe\101\ufffe\102\ufffe\103" +
    "\037\113\040\001\002\000\004\104\057\001\002\000\004" +
    "\036\041\001\002\000\004\107\042\001\002\000\006\037" +
    "\043\063\044\001\002\000\012\017\ufff6\101\ufff6\102\ufff6" +
    "\103\053\001\002\000\004\107\045\001\002\000\004\037" +
    "\046\001\002\000\012\017\ufff5\101\ufff5\102\ufff5\103\047" +
    "\001\002\000\004\104\050\001\002\000\004\106\051\001" +
    "\002\000\004\062\052\001\002\000\010\017\ufff0\101\ufff0" +
    "\102\ufff0\001\002\000\004\104\054\001\002\000\004\106" +
    "\055\001\002\000\004\062\056\001\002\000\010\017\ufff1" +
    "\101\ufff1\102\ufff1\001\002\000\004\106\060\001\002\000" +
    "\004\062\061\001\002\000\010\017\ufffa\101\ufffa\102\ufffa" +
    "\001\002\000\004\104\102\001\002\000\004\036\064\001" +
    "\002\000\004\107\065\001\002\000\006\037\066\063\067" +
    "\001\002\000\012\017\ufff8\101\ufff8\102\ufff8\103\076\001" +
    "\002\000\004\107\070\001\002\000\006\037\071\103\072" +
    "\001\002\000\010\017\ufff7\101\ufff7\102\ufff7\001\002\000" +
    "\004\104\073\001\002\000\004\106\074\001\002\000\004" +
    "\062\075\001\002\000\010\017\ufff2\101\ufff2\102\ufff2\001" +
    "\002\000\004\104\077\001\002\000\004\106\100\001\002" +
    "\000\004\062\101\001\002\000\010\017\ufff3\101\ufff3\102" +
    "\ufff3\001\002\000\004\106\103\001\002\000\004\062\104" +
    "\001\002\000\010\017\ufffb\101\ufffb\102\ufffb\001\002\000" +
    "\004\002\001\001\002\000\004\074\107\001\002\000\004" +
    "\075\110\001\002\000\050\005\141\010\151\011\112\012" +
    "\144\016\134\017\111\020\122\021\133\022\140\023\136" +
    "\024\137\025\121\070\142\071\132\076\127\107\125\110" +
    "\146\111\152\112\135\001\002\000\004\107\uff3f\001\002" +
    "\000\004\073\u0286\001\002\000\062\005\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\070" +
    "\uffb8\071\uffb8\072\uffb8\076\uffb8\107\uffb8\110\uffb8\111\uffb8" +
    "\112\uffb8\116\uffb8\001\002\000\062\005\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\070" +
    "\uffbf\071\uffbf\072\uffbf\076\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\112\uffbf\116\uffbf\001\002\000\062\005\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\076\uffb4\107\uffb4\110\uffb4\111\uffb4" +
    "\112\uffb4\116\uffb4\001\002\000\062\005\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\076\uffc5\107\uffc5\110\uffc5\111\uffc5" +
    "\112\uffc5\116\uffc5\001\002\000\062\005\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\070" +
    "\uffb2\071\uffb2\072\uffb2\076\uffb2\107\uffb2\110\uffb2\111\uffb2" +
    "\112\uffb2\116\uffb2\001\002\000\052\005\141\007\302\010" +
    "\151\011\112\012\144\016\134\017\111\020\122\021\133" +
    "\022\140\023\136\024\137\025\121\070\142\071\132\076" +
    "\u0285\107\125\110\146\111\152\112\135\001\002\000\004" +
    "\107\u0276\001\002\000\004\107\uff3b\001\002\000\004\107" +
    "\u020f\001\002\000\062\005\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\076\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\116" +
    "\uffb6\001\002\000\022\026\u01ec\051\u01e8\052\u01eb\053\u01ea" +
    "\054\u01e6\055\u01e9\056\u01e5\057\u01e7\001\002\000\062\005" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\070\uffc3\071\uffc3\072\uffc3\076\uffc3\107\uffc3" +
    "\110\uffc3\111\uffc3\112\uffc3\116\uffc3\001\002\000\004\002" +
    "\uffec\001\002\000\062\005\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\070\uffba\071\uffba" +
    "\072\uffba\076\uffba\107\uffba\110\uffba\111\uffba\112\uffba\116" +
    "\uffba\001\002\000\062\005\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\070\uffc1\071\uffc1" +
    "\072\uffc1\076\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\116" +
    "\uffc1\001\002\000\004\060\u01de\001\002\000\004\107\uff3e" +
    "\001\002\000\004\107\u01b0\001\002\000\004\107\u01aa\001" +
    "\002\000\004\107\uff3c\001\002\000\004\107\uff3d\001\002" +
    "\000\004\107\u017c\001\002\000\004\073\u0172\001\002\000" +
    "\004\061\u0161\001\002\000\004\107\u010e\001\002\000\004" +
    "\073\343\001\002\000\062\005\uff7b\007\uff7b\010\uff7b\011" +
    "\uff7b\012\uff7b\013\uff7b\014\uff7b\016\uff7b\017\uff7b\020\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\070\uff7b\071" +
    "\uff7b\072\uff7b\076\uff7b\107\uff7b\110\uff7b\111\uff7b\112\uff7b" +
    "\116\uff7b\001\002\000\004\073\316\001\002\000\062\005" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\070\uffb0\071\uffb0\072\uffb0\076\uffb0\107\uffb0" +
    "\110\uffb0\111\uffb0\112\uffb0\116\uffb0\001\002\000\062\005" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\070\uffbc\071\uffbc\072\uffbc\076\uffbc\107\uffbc" +
    "\110\uffbc\111\uffbc\112\uffbc\116\uffbc\001\002\000\004\073" +
    "\222\001\002\000\004\073\153\001\002\000\006\066\155" +
    "\074\154\001\002\000\004\062\221\001\002\000\032\015" +
    "\166\026\165\027\163\030\172\031\157\032\162\033\173" +
    "\063\161\065\160\066\174\107\164\114\171\001\002\000" +
    "\004\066\ufef9\001\002\000\036\004\uffca\015\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\063\uffca\065" +
    "\uffca\066\uffca\074\uffca\107\uffca\114\uffca\001\002\000\036" +
    "\004\uffc7\015\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\063\uffc7\065\uffc7\066\uffc7\074\uffc7\107\uffc7" +
    "\114\uffc7\001\002\000\036\004\uffcf\015\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\063\uffcf\065\uffcf" +
    "\066\uffcf\074\uffcf\107\uffcf\114\uffcf\001\002\000\036\004" +
    "\uffcb\015\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\063\uffcb\065\uffcb\066\uffcb\074\uffcb\107\uffcb\114" +
    "\uffcb\001\002\000\036\004\uffcc\015\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\063\uffcc\065\uffcc\066" +
    "\uffcc\074\uffcc\107\uffcc\114\uffcc\001\002\000\036\004\uffd1" +
    "\015\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\063\uffd1\065\uffd1\066\uffd1\074\uffd1\107\uffd1\114\uffd1" +
    "\001\002\000\036\004\uffc9\015\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\063\uffc9\065\uffc9\066\uffc9" +
    "\074\uffc9\107\uffc9\114\uffc9\001\002\000\036\004\uffce\015" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\063\uffce\065\uffce\066\uffce\074\uffce\107\uffce\114\uffce\001" +
    "\002\000\004\066\207\001\002\000\036\004\uffda\015\166" +
    "\026\165\027\163\030\172\031\157\032\162\033\173\063" +
    "\161\065\160\066\uffda\074\uffda\107\164\114\171\001\002" +
    "\000\036\004\uffd0\015\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\063\uffd0\065\uffd0\066\uffd0\074\uffd0" +
    "\107\uffd0\114\uffd0\001\002\000\036\004\uffcd\015\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\063\uffcd" +
    "\065\uffcd\066\uffcd\074\uffcd\107\uffcd\114\uffcd\001\002\000" +
    "\036\004\uffc8\015\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\063\uffc8\065\uffc8\066\uffc8\074\uffc8\107" +
    "\uffc8\114\uffc8\001\002\000\004\074\175\001\002\000\004" +
    "\062\176\001\002\000\062\005\ufefd\007\ufefd\010\ufefd\011" +
    "\ufefd\012\ufefd\013\ufefd\014\ufefd\016\ufefd\017\ufefd\020\ufefd" +
    "\021\ufefd\022\ufefd\023\ufefd\024\ufefd\025\ufefd\070\ufefd\071" +
    "\ufefd\072\ufefd\076\ufefd\107\ufefd\110\ufefd\111\ufefd\112\ufefd" +
    "\116\ufefd\001\002\000\036\004\uffd9\015\166\026\165\027" +
    "\163\030\172\031\157\032\162\033\173\063\161\065\160" +
    "\066\uffd9\074\uffd9\107\164\114\171\001\002\000\036\004" +
    "\uffd8\015\166\026\165\027\163\030\172\031\157\032\162" +
    "\033\173\063\161\065\160\066\uffd8\074\uffd8\107\164\114" +
    "\171\001\002\000\036\004\uffd7\015\166\026\165\027\163" +
    "\030\172\031\157\032\162\033\173\063\161\065\160\066" +
    "\uffd7\074\uffd7\107\164\114\171\001\002\000\036\004\uffd6" +
    "\015\166\026\165\027\163\030\172\031\157\032\162\033" +
    "\173\063\161\065\160\066\uffd6\074\uffd6\107\164\114\171" +
    "\001\002\000\036\004\uffd5\015\166\026\165\027\163\030" +
    "\172\031\157\032\162\033\173\063\161\065\160\066\uffd5" +
    "\074\uffd5\107\164\114\171\001\002\000\036\004\uffd4\015" +
    "\166\026\165\027\163\030\172\031\157\032\162\033\173" +
    "\063\161\065\160\066\uffd4\074\uffd4\107\164\114\171\001" +
    "\002\000\036\004\uffd3\015\166\026\165\027\163\030\172" +
    "\031\157\032\162\033\173\063\161\065\160\066\uffd3\074" +
    "\uffd3\107\164\114\171\001\002\000\010\004\uffd2\066\uffd2" +
    "\074\uffd2\001\002\000\034\015\166\026\165\027\163\030" +
    "\172\031\157\032\162\033\173\045\212\063\161\065\160" +
    "\074\211\107\164\114\171\001\002\000\004\074\217\001" +
    "\002\000\004\062\216\001\002\000\030\015\166\026\165" +
    "\027\163\030\172\031\157\032\162\033\173\063\161\065" +
    "\160\107\164\114\171\001\002\000\004\074\214\001\002" +
    "\000\004\062\215\001\002\000\062\005\ufefa\007\ufefa\010" +
    "\ufefa\011\ufefa\012\ufefa\013\ufefa\014\ufefa\016\ufefa\017\ufefa" +
    "\020\ufefa\021\ufefa\022\ufefa\023\ufefa\024\ufefa\025\ufefa\070" +
    "\ufefa\071\ufefa\072\ufefa\076\ufefa\107\ufefa\110\ufefa\111\ufefa" +
    "\112\ufefa\116\ufefa\001\002\000\062\005\ufefc\007\ufefc\010" +
    "\ufefc\011\ufefc\012\ufefc\013\ufefc\014\ufefc\016\ufefc\017\ufefc" +
    "\020\ufefc\021\ufefc\022\ufefc\023\ufefc\024\ufefc\025\ufefc\070" +
    "\ufefc\071\ufefc\072\ufefc\076\ufefc\107\ufefc\110\ufefc\111\ufefc" +
    "\112\ufefc\116\ufefc\001\002\000\004\062\220\001\002\000" +
    "\062\005\ufefb\007\ufefb\010\ufefb\011\ufefb\012\ufefb\013\ufefb" +
    "\014\ufefb\016\ufefb\017\ufefb\020\ufefb\021\ufefb\022\ufefb\023" +
    "\ufefb\024\ufefb\025\ufefb\070\ufefb\071\ufefb\072\ufefb\076\ufefb" +
    "\107\ufefb\110\ufefb\111\ufefb\112\ufefb\116\ufefb\001\002\000" +
    "\062\005\ufefe\007\ufefe\010\ufefe\011\ufefe\012\ufefe\013\ufefe" +
    "\014\ufefe\016\ufefe\017\ufefe\020\ufefe\021\ufefe\022\ufefe\023" +
    "\ufefe\024\ufefe\025\ufefe\070\ufefe\071\ufefe\072\ufefe\076\ufefe" +
    "\107\ufefe\110\ufefe\111\ufefe\112\ufefe\116\ufefe\001\002\000" +
    "\012\046\227\047\226\050\223\107\230\001\002\000\010" +
    "\062\uff2c\074\uff2c\107\uff2c\001\002\000\006\062\uff38\074" +
    "\uff38\001\002\000\004\074\264\001\002\000\010\062\uff2b" +
    "\074\uff2b\107\uff2b\001\002\000\004\107\253\001\002\000" +
    "\032\034\240\035\232\036\233\037\237\040\243\041\234" +
    "\042\231\043\236\044\235\045\242\062\uff39\074\uff39\001" +
    "\002\000\014\047\uff24\050\uff24\066\uff24\107\uff24\114\uff24" +
    "\001\002\000\014\047\uff29\050\uff29\066\uff29\107\uff29\114" +
    "\uff29\001\002\000\014\047\uff26\050\uff26\066\uff26\107\uff26" +
    "\114\uff26\001\002\000\014\047\uff28\050\uff28\066\uff28\107" +
    "\uff28\114\uff28\001\002\000\014\047\uff22\050\uff22\066\uff22" +
    "\107\uff22\114\uff22\001\002\000\014\047\uff23\050\uff23\066" +
    "\uff23\107\uff23\114\uff23\001\002\000\014\047\uff25\050\uff25" +
    "\066\uff25\107\uff25\114\uff25\001\002\000\014\047\uff2a\050" +
    "\uff2a\066\uff2a\107\uff2a\114\uff2a\001\002\000\014\047\226" +
    "\050\223\066\246\107\247\114\244\001\002\000\014\047" +
    "\uff21\050\uff21\066\uff21\107\uff21\114\uff21\001\002\000\014" +
    "\047\uff27\050\uff27\066\uff27\107\uff27\114\uff27\001\002\000" +
    "\006\062\uff35\074\uff35\001\002\000\006\062\uff36\074\uff36" +
    "\001\002\000\006\066\250\107\251\001\002\000\006\062" +
    "\uff34\074\uff34\001\002\000\006\062\uff33\074\uff33\001\002" +
    "\000\004\066\252\001\002\000\006\062\uff32\074\uff32\001" +
    "\002\000\032\034\240\035\232\036\233\037\237\040\243" +
    "\041\234\042\231\043\236\044\235\045\242\062\uff37\074" +
    "\uff37\001\002\000\014\047\226\050\223\066\256\107\260" +
    "\114\255\001\002\000\006\062\uff30\074\uff30\001\002\000" +
    "\006\066\261\107\262\001\002\000\006\062\uff31\074\uff31" +
    "\001\002\000\006\062\uff2f\074\uff2f\001\002\000\006\062" +
    "\uff2e\074\uff2e\001\002\000\004\066\263\001\002\000\006" +
    "\062\uff2d\074\uff2d\001\002\000\004\075\265\001\002\000" +
    "\046\005\141\010\151\011\112\012\144\016\134\017\111" +
    "\020\122\021\133\022\140\023\136\024\137\025\121\070" +
    "\142\071\132\107\125\110\146\111\152\112\135\001\002" +
    "\000\052\005\141\007\302\010\151\011\112\012\144\016" +
    "\134\017\111\020\122\021\133\022\140\023\136\024\137" +
    "\025\121\070\142\071\132\076\276\107\125\110\146\111" +
    "\152\112\135\001\002\000\062\005\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\076\uffb9\107\uffb9\110\uffb9\111\uffb9\112" +
    "\uffb9\116\uffb9\001\002\000\062\005\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\070\uffc0" +
    "\071\uffc0\072\uffc0\076\uffc0\107\uffc0\110\uffc0\111\uffc0\112" +
    "\uffc0\116\uffc0\001\002\000\062\005\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\070\uffb5" +
    "\071\uffb5\072\uffb5\076\uffb5\107\uffb5\110\uffb5\111\uffb5\112" +
    "\uffb5\116\uffb5\001\002\000\062\005\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\076\uffc6\107\uffc6\110\uffc6\111\uffc6\112" +
    "\uffc6\116\uffc6\001\002\000\062\005\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\076\uffb3\107\uffb3\110\uffb3\111\uffb3\112" +
    "\uffb3\116\uffb3\001\002\000\062\005\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\076\uffb7\107\uffb7\110\uffb7\111\uffb7\112" +
    "\uffb7\116\uffb7\001\002\000\062\005\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\076\uffc4\107\uffc4\110\uffc4\111\uffc4\112" +
    "\uffc4\116\uffc4\001\002\000\062\005\uff1f\007\uff1f\010\uff1f" +
    "\011\uff1f\012\uff1f\013\uff1f\014\uff1f\016\uff1f\017\uff1f\020" +
    "\uff1f\021\uff1f\022\uff1f\023\uff1f\024\uff1f\025\uff1f\070\uff1f" +
    "\071\uff1f\072\uff1f\076\uff1f\107\uff1f\110\uff1f\111\uff1f\112" +
    "\uff1f\116\uff1f\001\002\000\062\005\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\076\uffbb\107\uffbb\110\uffbb\111\uffbb\112" +
    "\uffbb\116\uffbb\001\002\000\062\005\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\070\uffc2" +
    "\071\uffc2\072\uffc2\076\uffc2\107\uffc2\110\uffc2\111\uffc2\112" +
    "\uffc2\116\uffc2\001\002\000\004\007\302\001\002\000\004" +
    "\075\305\001\002\000\062\005\uffb1\007\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\070\uffb1\071" +
    "\uffb1\072\uffb1\076\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1" +
    "\116\uffb1\001\002\000\062\005\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\070\uffbd\071" +
    "\uffbd\072\uffbd\076\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd" +
    "\116\uffbd\001\002\000\046\005\141\010\151\011\112\012" +
    "\144\016\134\017\111\020\122\021\133\022\140\023\136" +
    "\024\137\025\121\070\142\071\132\107\125\110\146\111" +
    "\152\112\135\001\002\000\052\005\141\007\302\010\151" +
    "\011\112\012\144\016\134\017\111\020\122\021\133\022" +
    "\140\023\136\024\137\025\121\070\142\071\132\076\307" +
    "\107\125\110\146\111\152\112\135\001\002\000\004\010" +
    "\310\001\002\000\004\073\311\001\002\000\012\046\227" +
    "\047\226\050\223\107\230\001\002\000\004\074\313\001" +
    "\002\000\004\062\314\001\002\000\062\005\uff1e\007\uff1e" +
    "\010\uff1e\011\uff1e\012\uff1e\013\uff1e\014\uff1e\016\uff1e\017" +
    "\uff1e\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\025\uff1e" +
    "\070\uff1e\071\uff1e\072\uff1e\076\uff1e\107\uff1e\110\uff1e\111" +
    "\uff1e\112\uff1e\116\uff1e\001\002\000\062\005\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\076\uffbe\107\uffbe\110\uffbe\111" +
    "\uffbe\112\uffbe\116\uffbe\001\002\000\006\066\320\074\317" +
    "\001\002\000\004\062\342\001\002\000\032\015\166\026" +
    "\165\027\163\030\172\031\157\032\162\033\173\063\161" +
    "\065\160\066\323\107\164\114\171\001\002\000\006\004" +
    "\341\066\uff0f\001\002\000\004\066\326\001\002\000\004" +
    "\074\324\001\002\000\004\062\325\001\002\000\062\005" +
    "\uff13\007\uff13\010\uff13\011\uff13\012\uff13\013\uff13\014\uff13" +
    "\016\uff13\017\uff13\020\uff13\021\uff13\022\uff13\023\uff13\024" +
    "\uff13\025\uff13\070\uff13\071\uff13\072\uff13\076\uff13\107\uff13" +
    "\110\uff13\111\uff13\112\uff13\116\uff13\001\002\000\034\015" +
    "\166\026\165\027\163\030\172\031\157\032\162\033\173" +
    "\063\161\065\160\066\331\074\330\107\164\114\171\001" +
    "\002\000\004\074\337\001\002\000\004\062\336\001\002" +
    "\000\030\015\166\026\165\027\163\030\172\031\157\032" +
    "\162\033\173\063\161\065\160\107\164\114\171\001\002" +
    "\000\004\066\333\001\002\000\004\074\334\001\002\000" +
    "\004\062\335\001\002\000\062\005\uff10\007\uff10\010\uff10" +
    "\011\uff10\012\uff10\013\uff10\014\uff10\016\uff10\017\uff10\020" +
    "\uff10\021\uff10\022\uff10\023\uff10\024\uff10\025\uff10\070\uff10" +
    "\071\uff10\072\uff10\076\uff10\107\uff10\110\uff10\111\uff10\112" +
    "\uff10\116\uff10\001\002\000\062\005\uff12\007\uff12\010\uff12" +
    "\011\uff12\012\uff12\013\uff12\014\uff12\016\uff12\017\uff12\020" +
    "\uff12\021\uff12\022\uff12\023\uff12\024\uff12\025\uff12\070\uff12" +
    "\071\uff12\072\uff12\076\uff12\107\uff12\110\uff12\111\uff12\112" +
    "\uff12\116\uff12\001\002\000\004\062\340\001\002\000\062" +
    "\005\uff11\007\uff11\010\uff11\011\uff11\012\uff11\013\uff11\014" +
    "\uff11\016\uff11\017\uff11\020\uff11\021\uff11\022\uff11\023\uff11" +
    "\024\uff11\025\uff11\070\uff11\071\uff11\072\uff11\076\uff11\107" +
    "\uff11\110\uff11\111\uff11\112\uff11\116\uff11\001\002\000\004" +
    "\066\uff0e\001\002\000\062\005\uff14\007\uff14\010\uff14\011" +
    "\uff14\012\uff14\013\uff14\014\uff14\016\uff14\017\uff14\020\uff14" +
    "\021\uff14\022\uff14\023\uff14\024\uff14\025\uff14\070\uff14\071" +
    "\uff14\072\uff14\076\uff14\107\uff14\110\uff14\111\uff14\112\uff14" +
    "\116\uff14\001\002\000\004\107\344\001\002\000\004\074" +
    "\345\001\002\000\004\075\346\001\002\000\010\013\350" +
    "\076\347\116\351\001\002\000\062\005\uff0b\007\uff0b\010" +
    "\uff0b\011\uff0b\012\uff0b\013\uff0b\014\uff0b\016\uff0b\017\uff0b" +
    "\020\uff0b\021\uff0b\022\uff0b\023\uff0b\024\uff0b\025\uff0b\070" +
    "\uff0b\071\uff0b\072\uff0b\076\uff0b\107\uff0b\110\uff0b\111\uff0b" +
    "\112\uff0b\116\uff0b\001\002\000\006\107\u0101\114\u0100\001" +
    "\002\000\004\065\375\001\002\000\010\013\350\076\353" +
    "\116\354\001\002\000\062\005\uff0a\007\uff0a\010\uff0a\011" +
    "\uff0a\012\uff0a\013\uff0a\014\uff0a\016\uff0a\017\uff0a\020\uff0a" +
    "\021\uff0a\022\uff0a\023\uff0a\024\uff0a\025\uff0a\070\uff0a\071" +
    "\uff0a\072\uff0a\076\uff0a\107\uff0a\110\uff0a\111\uff0a\112\uff0a" +
    "\116\uff0a\001\002\000\004\065\372\001\002\000\010\013" +
    "\350\076\356\116\357\001\002\000\062\005\uff09\007\uff09" +
    "\010\uff09\011\uff09\012\uff09\013\uff09\014\uff09\016\uff09\017" +
    "\uff09\020\uff09\021\uff09\022\uff09\023\uff09\024\uff09\025\uff09" +
    "\070\uff09\071\uff09\072\uff09\076\uff09\107\uff09\110\uff09\111" +
    "\uff09\112\uff09\116\uff09\001\002\000\004\065\366\001\002" +
    "\000\006\076\361\116\362\001\002\000\062\005\uff08\007" +
    "\uff08\010\uff08\011\uff08\012\uff08\013\uff08\014\uff08\016\uff08" +
    "\017\uff08\020\uff08\021\uff08\022\uff08\023\uff08\024\uff08\025" +
    "\uff08\070\uff08\071\uff08\072\uff08\076\uff08\107\uff08\110\uff08" +
    "\111\uff08\112\uff08\116\uff08\001\002\000\004\065\363\001" +
    "\002\000\004\062\364\001\002\000\004\076\365\001\002" +
    "\000\062\005\uff04\007\uff04\010\uff04\011\uff04\012\uff04\013" +
    "\uff04\014\uff04\016\uff04\017\uff04\020\uff04\021\uff04\022\uff04" +
    "\023\uff04\024\uff04\025\uff04\070\uff04\071\uff04\072\uff04\076" +
    "\uff04\107\uff04\110\uff04\111\uff04\112\uff04\116\uff04\001\002" +
    "\000\050\005\141\010\151\011\112\012\144\016\134\017" +
    "\111\020\122\021\133\022\140\023\136\024\137\025\121" +
    "\062\370\070\142\071\132\107\125\110\146\111\152\112" +
    "\135\001\002\000\056\005\141\007\302\010\151\011\112" +
    "\012\144\013\ufeff\016\134\017\111\020\122\021\133\022" +
    "\140\023\136\024\137\025\121\070\142\071\132\076\ufeff" +
    "\107\125\110\146\111\152\112\135\116\ufeff\001\002\000" +
    "\004\076\371\001\002\000\062\005\uff05\007\uff05\010\uff05" +
    "\011\uff05\012\uff05\013\uff05\014\uff05\016\uff05\017\uff05\020" +
    "\uff05\021\uff05\022\uff05\023\uff05\024\uff05\025\uff05\070\uff05" +
    "\071\uff05\072\uff05\076\uff05\107\uff05\110\uff05\111\uff05\112" +
    "\uff05\116\uff05\001\002\000\050\005\141\010\151\011\112" +
    "\012\144\016\134\017\111\020\122\021\133\022\140\023" +
    "\136\024\137\025\121\062\373\070\142\071\132\107\125" +
    "\110\146\111\152\112\135\001\002\000\004\076\374\001" +
    "\002\000\062\005\uff06\007\uff06\010\uff06\011\uff06\012\uff06" +
    "\013\uff06\014\uff06\016\uff06\017\uff06\020\uff06\021\uff06\022" +
    "\uff06\023\uff06\024\uff06\025\uff06\070\uff06\071\uff06\072\uff06" +
    "\076\uff06\107\uff06\110\uff06\111\uff06\112\uff06\116\uff06\001" +
    "\002\000\050\005\141\010\151\011\112\012\144\016\134" +
    "\017\111\020\122\021\133\022\140\023\136\024\137\025" +
    "\121\062\376\070\142\071\132\107\125\110\146\111\152" +
    "\112\135\001\002\000\004\076\377\001\002\000\062\005" +
    "\uff07\007\uff07\010\uff07\011\uff07\012\uff07\013\uff07\014\uff07" +
    "\016\uff07\017\uff07\020\uff07\021\uff07\022\uff07\023\uff07\024" +
    "\uff07\025\uff07\070\uff07\071\uff07\072\uff07\076\uff07\107\uff07" +
    "\110\uff07\111\uff07\112\uff07\116\uff07\001\002\000\004\065" +
    "\u0108\001\002\000\004\065\u0102\001\002\000\050\005\141" +
    "\010\151\011\112\012\144\014\u0104\016\134\017\111\020" +
    "\122\021\133\022\140\023\136\024\137\025\121\070\142" +
    "\071\132\107\125\110\146\111\152\112\135\001\002\000" +
    "\052\005\141\007\302\010\151\011\112\012\144\014\u0106" +
    "\016\134\017\111\020\122\021\133\022\140\023\136\024" +
    "\137\025\121\070\142\071\132\107\125\110\146\111\152" +
    "\112\135\001\002\000\004\062\u0105\001\002\000\010\013" +
    "\uff01\076\uff01\116\uff01\001\002\000\004\062\u0107\001\002" +
    "\000\010\013\uff00\076\uff00\116\uff00\001\002\000\050\005" +
    "\141\010\151\011\112\012\144\014\u010a\016\134\017\111" +
    "\020\122\021\133\022\140\023\136\024\137\025\121\070" +
    "\142\071\132\107\125\110\146\111\152\112\135\001\002" +
    "\000\052\005\141\007\302\010\151\011\112\012\144\014" +
    "\u010c\016\134\017\111\020\122\021\133\022\140\023\136" +
    "\024\137\025\121\070\142\071\132\107\125\110\146\111" +
    "\152\112\135\001\002\000\004\062\u010b\001\002\000\010" +
    "\013\uff03\076\uff03\116\uff03\001\002\000\004\062\u010d\001" +
    "\002\000\010\013\uff02\076\uff02\116\uff02\001\002\000\010" +
    "\026\u0111\062\u010f\107\u0110\001\002\000\062\005\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\070\uffa1\071\uffa1\072\uffa1\076\uffa1\107\uffa1\110\uffa1" +
    "\111\uffa1\112\uffa1\116\uffa1\001\002\000\006\026\u015c\062" +
    "\u015b\001\002\000\006\107\u0113\114\u0112\001\002\000\020" +
    "\027\u0132\030\u0130\031\u0133\032\u012d\033\u012f\062\u012e\063" +
    "\u0131\001\002\000\014\027\u0117\030\u0116\031\u0118\032\u0114" +
    "\033\u0115\001\002\000\006\107\u012a\114\u0129\001\002\000" +
    "\006\107\u0126\114\u0125\001\002\000\006\107\u0122\114\u0121" +
    "\001\002\000\006\107\u011e\114\u011d\001\002\000\006\107" +
    "\u011a\114\u0119\001\002\000\004\062\u011c\001\002\000\004" +
    "\062\u011b\001\002\000\062\005\uff4e\007\uff4e\010\uff4e\011" +
    "\uff4e\012\uff4e\013\uff4e\014\uff4e\016\uff4e\017\uff4e\020\uff4e" +
    "\021\uff4e\022\uff4e\023\uff4e\024\uff4e\025\uff4e\070\uff4e\071" +
    "\uff4e\072\uff4e\076\uff4e\107\uff4e\110\uff4e\111\uff4e\112\uff4e" +
    "\116\uff4e\001\002\000\062\005\uff50\007\uff50\010\uff50\011" +
    "\uff50\012\uff50\013\uff50\014\uff50\016\uff50\017\uff50\020\uff50" +
    "\021\uff50\022\uff50\023\uff50\024\uff50\025\uff50\070\uff50\071" +
    "\uff50\072\uff50\076\uff50\107\uff50\110\uff50\111\uff50\112\uff50" +
    "\116\uff50\001\002\000\004\062\u0120\001\002\000\004\062" +
    "\u011f\001\002\000\062\005\uff54\007\uff54\010\uff54\011\uff54" +
    "\012\uff54\013\uff54\014\uff54\016\uff54\017\uff54\020\uff54\021" +
    "\uff54\022\uff54\023\uff54\024\uff54\025\uff54\070\uff54\071\uff54" +
    "\072\uff54\076\uff54\107\uff54\110\uff54\111\uff54\112\uff54\116" +
    "\uff54\001\002\000\062\005\uff55\007\uff55\010\uff55\011\uff55" +
    "\012\uff55\013\uff55\014\uff55\016\uff55\017\uff55\020\uff55\021" +
    "\uff55\022\uff55\023\uff55\024\uff55\025\uff55\070\uff55\071\uff55" +
    "\072\uff55\076\uff55\107\uff55\110\uff55\111\uff55\112\uff55\116" +
    "\uff55\001\002\000\004\062\u0124\001\002\000\004\062\u0123" +
    "\001\002\000\062\005\uff51\007\uff51\010\uff51\011\uff51\012" +
    "\uff51\013\uff51\014\uff51\016\uff51\017\uff51\020\uff51\021\uff51" +
    "\022\uff51\023\uff51\024\uff51\025\uff51\070\uff51\071\uff51\072" +
    "\uff51\076\uff51\107\uff51\110\uff51\111\uff51\112\uff51\116\uff51" +
    "\001\002\000\062\005\uff52\007\uff52\010\uff52\011\uff52\012" +
    "\uff52\013\uff52\014\uff52\016\uff52\017\uff52\020\uff52\021\uff52" +
    "\022\uff52\023\uff52\024\uff52\025\uff52\070\uff52\071\uff52\072" +
    "\uff52\076\uff52\107\uff52\110\uff52\111\uff52\112\uff52\116\uff52" +
    "\001\002\000\004\062\u0128\001\002\000\004\062\u0127\001" +
    "\002\000\062\005\uff48\007\uff48\010\uff48\011\uff48\012\uff48" +
    "\013\uff48\014\uff48\016\uff48\017\uff48\020\uff48\021\uff48\022" +
    "\uff48\023\uff48\024\uff48\025\uff48\070\uff48\071\uff48\072\uff48" +
    "\076\uff48\107\uff48\110\uff48\111\uff48\112\uff48\116\uff48\001" +
    "\002\000\062\005\uff49\007\uff49\010\uff49\011\uff49\012\uff49" +
    "\013\uff49\014\uff49\016\uff49\017\uff49\020\uff49\021\uff49\022" +
    "\uff49\023\uff49\024\uff49\025\uff49\070\uff49\071\uff49\072\uff49" +
    "\076\uff49\107\uff49\110\uff49\111\uff49\112\uff49\116\uff49\001" +
    "\002\000\004\062\u012c\001\002\000\004\062\u012b\001\002" +
    "\000\062\005\uff4b\007\uff4b\010\uff4b\011\uff4b\012\uff4b\013" +
    "\uff4b\014\uff4b\016\uff4b\017\uff4b\020\uff4b\021\uff4b\022\uff4b" +
    "\023\uff4b\024\uff4b\025\uff4b\070\uff4b\071\uff4b\072\uff4b\076" +
    "\uff4b\107\uff4b\110\uff4b\111\uff4b\112\uff4b\116\uff4b\001\002" +
    "\000\062\005\uff4d\007\uff4d\010\uff4d\011\uff4d\012\uff4d\013" +
    "\uff4d\014\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d" +
    "\023\uff4d\024\uff4d\025\uff4d\070\uff4d\071\uff4d\072\uff4d\076" +
    "\uff4d\107\uff4d\110\uff4d\111\uff4d\112\uff4d\116\uff4d\001\002" +
    "\000\004\107\u0159\001\002\000\062\005\uffa0\007\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\070" +
    "\uffa0\071\uffa0\072\uffa0\076\uffa0\107\uffa0\110\uffa0\111\uffa0" +
    "\112\uffa0\116\uffa0\001\002\000\004\107\u0157\001\002\000" +
    "\004\107\u0155\001\002\000\004\114\u0138\001\002\000\004" +
    "\107\u0136\001\002\000\004\107\u0134\001\002\000\004\062" +
    "\u0135\001\002\000\062\005\uff4f\007\uff4f\010\uff4f\011\uff4f" +
    "\012\uff4f\013\uff4f\014\uff4f\016\uff4f\017\uff4f\020\uff4f\021" +
    "\uff4f\022\uff4f\023\uff4f\024\uff4f\025\uff4f\070\uff4f\071\uff4f" +
    "\072\uff4f\076\uff4f\107\uff4f\110\uff4f\111\uff4f\112\uff4f\116" +
    "\uff4f\001\002\000\004\062\u0137\001\002\000\062\005\uff56" +
    "\007\uff56\010\uff56\011\uff56\012\uff56\013\uff56\014\uff56\016" +
    "\uff56\017\uff56\020\uff56\021\uff56\022\uff56\023\uff56\024\uff56" +
    "\025\uff56\070\uff56\071\uff56\072\uff56\076\uff56\107\uff56\110" +
    "\uff56\111\uff56\112\uff56\116\uff56\001\002\000\016\027\u013c" +
    "\030\u013b\031\u013e\032\u0139\062\u013a\107\u013d\001\002\000" +
    "\004\114\u0151\001\002\000\062\005\uff9f\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\070\uff9f" +
    "\071\uff9f\072\uff9f\076\uff9f\107\uff9f\110\uff9f\111\uff9f\112" +
    "\uff9f\116\uff9f\001\002\000\004\114\u014d\001\002\000\004" +
    "\114\u0149\001\002\000\006\062\u0144\114\u0143\001\002\000" +
    "\004\114\u013f\001\002\000\004\063\u0140\001\002\000\004" +
    "\114\u0141\001\002\000\004\062\u0142\001\002\000\062\005" +
    "\uff58\007\uff58\010\uff58\011\uff58\012\uff58\013\uff58\014\uff58" +
    "\016\uff58\017\uff58\020\uff58\021\uff58\022\uff58\023\uff58\024" +
    "\uff58\025\uff58\070\uff58\071\uff58\072\uff58\076\uff58\107\uff58" +
    "\110\uff58\111\uff58\112\uff58\116\uff58\001\002\000\004\063" +
    "\u0145\001\002\000\062\005\uff9d\007\uff9d\010\uff9d\011\uff9d" +
    "\012\uff9d\013\uff9d\014\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\076\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\116" +
    "\uff9d\001\002\000\004\114\u0146\001\002\000\004\114\u0147" +
    "\001\002\000\004\062\u0148\001\002\000\062\005\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\070\uff9b\071\uff9b\072\uff9b\076\uff9b\107\uff9b\110\uff9b" +
    "\111\uff9b\112\uff9b\116\uff9b\001\002\000\004\063\u014a\001" +
    "\002\000\004\114\u014b\001\002\000\004\062\u014c\001\002" +
    "\000\062\005\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013" +
    "\uff5a\014\uff5a\016\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a" +
    "\023\uff5a\024\uff5a\025\uff5a\070\uff5a\071\uff5a\072\uff5a\076" +
    "\uff5a\107\uff5a\110\uff5a\111\uff5a\112\uff5a\116\uff5a\001\002" +
    "\000\004\063\u014e\001\002\000\004\114\u014f\001\002\000" +
    "\004\062\u0150\001\002\000\062\005\uff59\007\uff59\010\uff59" +
    "\011\uff59\012\uff59\013\uff59\014\uff59\016\uff59\017\uff59\020" +
    "\uff59\021\uff59\022\uff59\023\uff59\024\uff59\025\uff59\070\uff59" +
    "\071\uff59\072\uff59\076\uff59\107\uff59\110\uff59\111\uff59\112" +
    "\uff59\116\uff59\001\002\000\004\063\u0152\001\002\000\004" +
    "\114\u0153\001\002\000\004\062\u0154\001\002\000\062\005" +
    "\uff57\007\uff57\010\uff57\011\uff57\012\uff57\013\uff57\014\uff57" +
    "\016\uff57\017\uff57\020\uff57\021\uff57\022\uff57\023\uff57\024" +
    "\uff57\025\uff57\070\uff57\071\uff57\072\uff57\076\uff57\107\uff57" +
    "\110\uff57\111\uff57\112\uff57\116\uff57\001\002\000\004\062" +
    "\u0156\001\002\000\062\005\uff53\007\uff53\010\uff53\011\uff53" +
    "\012\uff53\013\uff53\014\uff53\016\uff53\017\uff53\020\uff53\021" +
    "\uff53\022\uff53\023\uff53\024\uff53\025\uff53\070\uff53\071\uff53" +
    "\072\uff53\076\uff53\107\uff53\110\uff53\111\uff53\112\uff53\116" +
    "\uff53\001\002\000\004\062\u0158\001\002\000\062\005\uff4a" +
    "\007\uff4a\010\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a\016" +
    "\uff4a\017\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\024\uff4a" +
    "\025\uff4a\070\uff4a\071\uff4a\072\uff4a\076\uff4a\107\uff4a\110" +
    "\uff4a\111\uff4a\112\uff4a\116\uff4a\001\002\000\004\062\u015a" +
    "\001\002\000\062\005\uff4c\007\uff4c\010\uff4c\011\uff4c\012" +
    "\uff4c\013\uff4c\014\uff4c\016\uff4c\017\uff4c\020\uff4c\021\uff4c" +
    "\022\uff4c\023\uff4c\024\uff4c\025\uff4c\070\uff4c\071\uff4c\072" +
    "\uff4c\076\uff4c\107\uff4c\110\uff4c\111\uff4c\112\uff4c\116\uff4c" +
    "\001\002\000\062\005\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\070\uff9e\071\uff9e\072" +
    "\uff9e\076\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e\116\uff9e" +
    "\001\002\000\004\114\u015d\001\002\000\004\063\u015e\001" +
    "\002\000\004\114\u015f\001\002\000\004\062\u0160\001\002" +
    "\000\062\005\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\070\uff9c\071\uff9c\072\uff9c\076" +
    "\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c\116\uff9c\001\002" +
    "\000\006\066\u0162\107\u0164\001\002\000\032\015\166\026" +
    "\165\027\163\030\172\031\157\032\162\033\173\063\161" +
    "\065\160\066\u0170\107\164\114\171\001\002\000\006\061" +
    "\u0166\062\u0165\001\002\000\006\061\ufef1\062\ufef1\001\002" +
    "\000\062\005\ufef5\007\ufef5\010\ufef5\011\ufef5\012\ufef5\013" +
    "\ufef5\014\ufef5\016\ufef5\017\ufef5\020\ufef5\021\ufef5\022\ufef5" +
    "\023\ufef5\024\ufef5\025\ufef5\070\ufef5\071\ufef5\072\ufef5\076" +
    "\ufef5\107\ufef5\110\ufef5\111\ufef5\112\ufef5\116\ufef5\001\002" +
    "\000\006\066\u0162\107\u0164\001\002\000\006\061\u0169\062" +
    "\u0168\001\002\000\062\005\ufef4\007\ufef4\010\ufef4\011\ufef4" +
    "\012\ufef4\013\ufef4\014\ufef4\016\ufef4\017\ufef4\020\ufef4\021" +
    "\ufef4\022\ufef4\023\ufef4\024\ufef4\025\ufef4\070\ufef4\071\ufef4" +
    "\072\ufef4\076\ufef4\107\ufef4\110\ufef4\111\ufef4\112\ufef4\116" +
    "\ufef4\001\002\000\006\066\u0162\107\u0164\001\002\000\006" +
    "\061\u016c\062\u016b\001\002\000\062\005\ufef3\007\ufef3\010" +
    "\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3\016\ufef3\017\ufef3" +
    "\020\ufef3\021\ufef3\022\ufef3\023\ufef3\024\ufef3\025\ufef3\070" +
    "\ufef3\071\ufef3\072\ufef3\076\ufef3\107\ufef3\110\ufef3\111\ufef3" +
    "\112\ufef3\116\ufef3\001\002\000\006\066\u0162\107\u0164\001" +
    "\002\000\004\062\u016e\001\002\000\062\005\ufef2\007\ufef2" +
    "\010\ufef2\011\ufef2\012\ufef2\013\ufef2\014\ufef2\016\ufef2\017" +
    "\ufef2\020\ufef2\021\ufef2\022\ufef2\023\ufef2\024\ufef2\025\ufef2" +
    "\070\ufef2\071\ufef2\072\ufef2\076\ufef2\107\ufef2\110\ufef2\111" +
    "\ufef2\112\ufef2\116\ufef2\001\002\000\004\066\u0171\001\002" +
    "\000\006\061\ufef0\062\ufef0\001\002\000\006\061\ufeef\062" +
    "\ufeef\001\002\000\012\046\227\047\226\050\223\107\230" +
    "\001\002\000\004\074\u0174\001\002\000\004\075\u0175\001" +
    "\002\000\046\005\141\010\151\011\112\012\144\016\134" +
    "\017\111\020\122\021\133\022\140\023\136\024\137\025" +
    "\121\070\142\071\132\107\125\110\146\111\152\112\135" +
    "\001\002\000\052\005\141\007\302\010\151\011\112\012" +
    "\144\016\134\017\111\020\122\021\133\022\140\023\136" +
    "\024\137\025\121\070\142\071\132\076\u0177\107\125\110" +
    "\146\111\152\112\135\001\002\000\064\005\uff3a\006\u0178" +
    "\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a\014\uff3a\016" +
    "\uff3a\017\uff3a\020\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a" +
    "\025\uff3a\070\uff3a\071\uff3a\072\uff3a\076\uff3a\107\uff3a\110" +
    "\uff3a\111\uff3a\112\uff3a\116\uff3a\001\002\000\004\075\u0179" +
    "\001\002\000\046\005\141\010\151\011\112\012\144\016" +
    "\134\017\111\020\122\021\133\022\140\023\136\024\137" +
    "\025\121\070\142\071\132\107\125\110\146\111\152\112" +
    "\135\001\002\000\052\005\141\007\302\010\151\011\112" +
    "\012\144\016\134\017\111\020\122\021\133\022\140\023" +
    "\136\024\137\025\121\070\142\071\132\076\u017b\107\125" +
    "\110\146\111\152\112\135\001\002\000\062\005\uff20\007" +
    "\uff20\010\uff20\011\uff20\012\uff20\013\uff20\014\uff20\016\uff20" +
    "\017\uff20\020\uff20\021\uff20\022\uff20\023\uff20\024\uff20\025" +
    "\uff20\070\uff20\071\uff20\072\uff20\076\uff20\107\uff20\110\uff20" +
    "\111\uff20\112\uff20\116\uff20\001\002\000\010\026\u017f\062" +
    "\u017d\107\u017e\001\002\000\062\005\uff89\007\uff89\010\uff89" +
    "\011\uff89\012\uff89\013\uff89\014\uff89\016\uff89\017\uff89\020" +
    "\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\070\uff89" +
    "\071\uff89\072\uff89\076\uff89\107\uff89\110\uff89\111\uff89\112" +
    "\uff89\116\uff89\001\002\000\006\026\u01a3\062\u01a2\001\002" +
    "\000\006\066\u0180\107\u0181\001\002\000\032\015\166\026" +
    "\165\027\163\030\172\031\157\032\162\033\173\063\161" +
    "\065\160\066\u018a\107\164\114\171\001\002\000\004\027" +
    "\u0182\001\002\000\006\066\u0183\107\u0184\001\002\000\030" +
    "\015\166\026\165\027\163\030\172\031\157\032\162\033" +
    "\173\063\161\065\160\107\164\114\171\001\002\000\004" +
    "\062\u0185\001\002\000\062\005\uff40\007\uff40\010\uff40\011" +
    "\uff40\012\uff40\013\uff40\014\uff40\016\uff40\017\uff40\020\uff40" +
    "\021\uff40\022\uff40\023\uff40\024\uff40\025\uff40\070\uff40\071" +
    "\uff40\072\uff40\076\uff40\107\uff40\110\uff40\111\uff40\112\uff40" +
    "\116\uff40\001\002\000\004\066\u0187\001\002\000\004\062" +
    "\u0188\001\002\000\062\005\uff41\007\uff41\010\uff41\011\uff41" +
    "\012\uff41\013\uff41\014\uff41\016\uff41\017\uff41\020\uff41\021" +
    "\uff41\022\uff41\023\uff41\024\uff41\025\uff41\070\uff41\071\uff41" +
    "\072\uff41\076\uff41\107\uff41\110\uff41\111\uff41\112\uff41\116" +
    "\uff41\001\002\000\004\066\u0192\001\002\000\006\062\u018b" +
    "\107\u018c\001\002\000\062\005\uff88\007\uff88\010\uff88\011" +
    "\uff88\012\uff88\013\uff88\014\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\070\uff88\071" +
    "\uff88\072\uff88\076\uff88\107\uff88\110\uff88\111\uff88\112\uff88" +
    "\116\uff88\001\002\000\006\026\u018e\062\u018d\001\002\000" +
    "\062\005\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92" +
    "\014\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\025\uff92\070\uff92\071\uff92\072\uff92\076\uff92" +
    "\107\uff92\110\uff92\111\uff92\112\uff92\116\uff92\001\002\000" +
    "\004\066\u018f\001\002\000\004\066\u0190\001\002\000\004" +
    "\062\u0191\001\002\000\062\005\uff90\007\uff90\010\uff90\011" +
    "\uff90\012\uff90\013\uff90\014\uff90\016\uff90\017\uff90\020\uff90" +
    "\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\070\uff90\071" +
    "\uff90\072\uff90\076\uff90\107\uff90\110\uff90\111\uff90\112\uff90" +
    "\116\uff90\001\002\000\010\027\u0194\062\u0193\107\u0195\001" +
    "\002\000\062\005\uff87\007\uff87\010\uff87\011\uff87\012\uff87" +
    "\013\uff87\014\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\023\uff87\024\uff87\025\uff87\070\uff87\071\uff87\072\uff87" +
    "\076\uff87\107\uff87\110\uff87\111\uff87\112\uff87\116\uff87\001" +
    "\002\000\006\066\u019c\107\u019d\001\002\000\006\026\u0197" +
    "\062\u0196\001\002\000\062\005\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\070\uff8f\071" +
    "\uff8f\072\uff8f\076\uff8f\107\uff8f\110\uff8f\111\uff8f\112\uff8f" +
    "\116\uff8f\001\002\000\004\066\u0198\001\002\000\030\015" +
    "\166\026\165\027\163\030\172\031\157\032\162\033\173" +
    "\063\161\065\160\107\164\114\171\001\002\000\004\066" +
    "\u019a\001\002\000\004\062\u019b\001\002\000\062\005\uff8d" +
    "\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\070\uff8d\071\uff8d\072\uff8d\076\uff8d\107\uff8d\110" +
    "\uff8d\111\uff8d\112\uff8d\116\uff8d\001\002\000\030\015\166" +
    "\026\165\027\163\030\172\031\157\032\162\033\173\063" +
    "\161\065\160\107\164\114\171\001\002\000\004\062\u019e" +
    "\001\002\000\062\005\uff42\007\uff42\010\uff42\011\uff42\012" +
    "\uff42\013\uff42\014\uff42\016\uff42\017\uff42\020\uff42\021\uff42" +
    "\022\uff42\023\uff42\024\uff42\025\uff42\070\uff42\071\uff42\072" +
    "\uff42\076\uff42\107\uff42\110\uff42\111\uff42\112\uff42\116\uff42" +
    "\001\002\000\004\066\u01a0\001\002\000\004\062\u01a1\001" +
    "\002\000\062\005\uff43\007\uff43\010\uff43\011\uff43\012\uff43" +
    "\013\uff43\014\uff43\016\uff43\017\uff43\020\uff43\021\uff43\022" +
    "\uff43\023\uff43\024\uff43\025\uff43\070\uff43\071\uff43\072\uff43" +
    "\076\uff43\107\uff43\110\uff43\111\uff43\112\uff43\116\uff43\001" +
    "\002\000\062\005\uff93\007\uff93\010\uff93\011\uff93\012\uff93" +
    "\013\uff93\014\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\070\uff93\071\uff93\072\uff93" +
    "\076\uff93\107\uff93\110\uff93\111\uff93\112\uff93\116\uff93\001" +
    "\002\000\004\066\u01a4\001\002\000\032\015\166\026\165" +
    "\027\163\030\172\031\157\032\162\033\173\063\161\065" +
    "\160\066\u01a6\107\164\114\171\001\002\000\004\066\u01a8" +
    "\001\002\000\004\062\u01a7\001\002\000\062\005\uff91\007" +
    "\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\016\uff91" +
    "\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\070\uff91\071\uff91\072\uff91\076\uff91\107\uff91\110\uff91" +
    "\111\uff91\112\uff91\116\uff91\001\002\000\004\062\u01a9\001" +
    "\002\000\062\005\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\070\uff8e\071\uff8e\072\uff8e" +
    "\076\uff8e\107\uff8e\110\uff8e\111\uff8e\112\uff8e\116\uff8e\001" +
    "\002\000\004\114\u01ab\001\002\000\006\062\u01ac\063\u01ad" +
    "\001\002\000\062\005\uff0d\007\uff0d\010\uff0d\011\uff0d\012" +
    "\uff0d\013\uff0d\014\uff0d\016\uff0d\017\uff0d\020\uff0d\021\uff0d" +
    "\022\uff0d\023\uff0d\024\uff0d\025\uff0d\070\uff0d\071\uff0d\072" +
    "\uff0d\076\uff0d\107\uff0d\110\uff0d\111\uff0d\112\uff0d\116\uff0d" +
    "\001\002\000\004\114\u01ae\001\002\000\004\062\u01af\001" +
    "\002\000\062\005\uff0c\007\uff0c\010\uff0c\011\uff0c\012\uff0c" +
    "\013\uff0c\014\uff0c\016\uff0c\017\uff0c\020\uff0c\021\uff0c\022" +
    "\uff0c\023\uff0c\024\uff0c\025\uff0c\070\uff0c\071\uff0c\072\uff0c" +
    "\076\uff0c\107\uff0c\110\uff0c\111\uff0c\112\uff0c\116\uff0c\001" +
    "\002\000\010\026\u01b3\062\u01b1\107\u01b2\001\002\000\062" +
    "\005\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c" +
    "\024\uff8c\025\uff8c\070\uff8c\071\uff8c\072\uff8c\076\uff8c\107" +
    "\uff8c\110\uff8c\111\uff8c\112\uff8c\116\uff8c\001\002\000\006" +
    "\026\u01d7\062\u01d6\001\002\000\006\066\u01b4\107\u01b5\001" +
    "\002\000\032\015\166\026\165\027\163\030\172\031\157" +
    "\032\162\033\173\063\161\065\160\066\u01be\107\164\114" +
    "\171\001\002\000\004\027\u01b6\001\002\000\006\066\u01b7" +
    "\107\u01b8\001\002\000\030\015\166\026\165\027\163\030" +
    "\172\031\157\032\162\033\173\063\161\065\160\107\164" +
    "\114\171\001\002\000\004\062\u01b9\001\002\000\062\005" +
    "\uff44\007\uff44\010\uff44\011\uff44\012\uff44\013\uff44\014\uff44" +
    "\016\uff44\017\uff44\020\uff44\021\uff44\022\uff44\023\uff44\024" +
    "\uff44\025\uff44\070\uff44\071\uff44\072\uff44\076\uff44\107\uff44" +
    "\110\uff44\111\uff44\112\uff44\116\uff44\001\002\000\004\066" +
    "\u01bb\001\002\000\004\062\u01bc\001\002\000\062\005\uff45" +
    "\007\uff45\010\uff45\011\uff45\012\uff45\013\uff45\014\uff45\016" +
    "\uff45\017\uff45\020\uff45\021\uff45\022\uff45\023\uff45\024\uff45" +
    "\025\uff45\070\uff45\071\uff45\072\uff45\076\uff45\107\uff45\110" +
    "\uff45\111\uff45\112\uff45\116\uff45\001\002\000\004\066\u01c6" +
    "\001\002\000\006\062\u01bf\107\u01c0\001\002\000\062\005" +
    "\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\025\uff8b\070\uff8b\071\uff8b\072\uff8b\076\uff8b\107\uff8b" +
    "\110\uff8b\111\uff8b\112\uff8b\116\uff8b\001\002\000\006\026" +
    "\u01c2\062\u01c1\001\002\000\062\005\uff99\007\uff99\010\uff99" +
    "\011\uff99\012\uff99\013\uff99\014\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\070\uff99" +
    "\071\uff99\072\uff99\076\uff99\107\uff99\110\uff99\111\uff99\112" +
    "\uff99\116\uff99\001\002\000\004\066\u01c3\001\002\000\004" +
    "\066\u01c4\001\002\000\004\062\u01c5\001\002\000\062\005" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\070\uff97\071\uff97\072\uff97\076\uff97\107\uff97" +
    "\110\uff97\111\uff97\112\uff97\116\uff97\001\002\000\010\027" +
    "\u01c9\062\u01c7\107\u01c8\001\002\000\062\005\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\016\uff8a\017" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\070\uff8a\071\uff8a\072\uff8a\076\uff8a\107\uff8a\110\uff8a\111" +
    "\uff8a\112\uff8a\116\uff8a\001\002\000\006\026\u01d1\062\u01d0" +
    "\001\002\000\006\066\u01ca\107\u01cb\001\002\000\030\015" +
    "\166\026\165\027\163\030\172\031\157\032\162\033\173" +
    "\063\161\065\160\107\164\114\171\001\002\000\004\062" +
    "\u01cc\001\002\000\062\005\uff46\007\uff46\010\uff46\011\uff46" +
    "\012\uff46\013\uff46\014\uff46\016\uff46\017\uff46\020\uff46\021" +
    "\uff46\022\uff46\023\uff46\024\uff46\025\uff46\070\uff46\071\uff46" +
    "\072\uff46\076\uff46\107\uff46\110\uff46\111\uff46\112\uff46\116" +
    "\uff46\001\002\000\004\066\u01ce\001\002\000\004\062\u01cf" +
    "\001\002\000\062\005\uff47\007\uff47\010\uff47\011\uff47\012" +
    "\uff47\013\uff47\014\uff47\016\uff47\017\uff47\020\uff47\021\uff47" +
    "\022\uff47\023\uff47\024\uff47\025\uff47\070\uff47\071\uff47\072" +
    "\uff47\076\uff47\107\uff47\110\uff47\111\uff47\112\uff47\116\uff47" +
    "\001\002\000\062\005\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\013\uff96\014\uff96\016\uff96\017\uff96\020\uff96\021\uff96" +
    "\022\uff96\023\uff96\024\uff96\025\uff96\070\uff96\071\uff96\072" +
    "\uff96\076\uff96\107\uff96\110\uff96\111\uff96\112\uff96\116\uff96" +
    "\001\002\000\004\066\u01d2\001\002\000\030\015\166\026" +
    "\165\027\163\030\172\031\157\032\162\033\173\063\161" +
    "\065\160\107\164\114\171\001\002\000\004\066\u01d4\001" +
    "\002\000\004\062\u01d5\001\002\000\062\005\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\070\uff94\071\uff94\072\uff94\076\uff94\107\uff94\110\uff94\111" +
    "\uff94\112\uff94\116\uff94\001\002\000\062\005\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\070\uff9a\071\uff9a\072\uff9a\076\uff9a\107\uff9a\110\uff9a\111" +
    "\uff9a\112\uff9a\116\uff9a\001\002\000\004\066\u01d8\001\002" +
    "\000\032\015\166\026\165\027\163\030\172\031\157\032" +
    "\162\033\173\063\161\065\160\066\u01da\107\164\114\171" +
    "\001\002\000\004\066\u01dc\001\002\000\004\062\u01db\001" +
    "\002\000\062\005\uff98\007\uff98\010\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\070\uff98\071\uff98\072\uff98" +
    "\076\uff98\107\uff98\110\uff98\111\uff98\112\uff98\116\uff98\001" +
    "\002\000\004\062\u01dd\001\002\000\062\005\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\016\uff95\017" +
    "\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\070\uff95\071\uff95\072\uff95\076\uff95\107\uff95\110\uff95\111" +
    "\uff95\112\uff95\116\uff95\001\002\000\006\062\u01df\107\u01e0" +
    "\001\002\000\062\005\ufef8\007\ufef8\010\ufef8\011\ufef8\012" +
    "\ufef8\013\ufef8\014\ufef8\016\ufef8\017\ufef8\020\ufef8\021\ufef8" +
    "\022\ufef8\023\ufef8\024\ufef8\025\ufef8\070\ufef8\071\ufef8\072" +
    "\ufef8\076\ufef8\107\ufef8\110\ufef8\111\ufef8\112\ufef8\116\ufef8" +
    "\001\002\000\006\060\u01e2\062\u01e1\001\002\000\062\005" +
    "\ufef7\007\ufef7\010\ufef7\011\ufef7\012\ufef7\013\ufef7\014\ufef7" +
    "\016\ufef7\017\ufef7\020\ufef7\021\ufef7\022\ufef7\023\ufef7\024" +
    "\ufef7\025\ufef7\070\ufef7\071\ufef7\072\ufef7\076\ufef7\107\ufef7" +
    "\110\ufef7\111\ufef7\112\ufef7\116\ufef7\001\002\000\002\001" +
    "\002\000\004\062\u01e4\001\002\000\062\005\ufef6\007\ufef6" +
    "\010\ufef6\011\ufef6\012\ufef6\013\ufef6\014\ufef6\016\ufef6\017" +
    "\ufef6\020\ufef6\021\ufef6\022\ufef6\023\ufef6\024\ufef6\025\ufef6" +
    "\070\ufef6\071\ufef6\072\ufef6\076\ufef6\107\ufef6\110\ufef6\111" +
    "\ufef6\112\ufef6\116\ufef6\001\002\000\006\107\u020c\114\u020b" +
    "\001\002\000\006\107\u0208\114\u0207\001\002\000\006\107" +
    "\u0204\114\u0203\001\002\000\004\062\u0202\001\002\000\006" +
    "\107\u01ff\114\u01fe\001\002\000\006\107\u01fb\114\u01fa\001" +
    "\002\000\004\062\u01f9\001\002\000\014\047\226\050\223" +
    "\066\u01ef\107\u01f0\114\u01ed\001\002\000\004\062\u01f8\001" +
    "\002\000\004\062\u01f7\001\002\000\032\015\166\026\165" +
    "\027\163\030\172\031\157\032\162\033\173\063\161\065" +
    "\160\066\u01f3\107\164\114\171\001\002\000\004\062\u01f1" +
    "\001\002\000\062\005\uff7e\007\uff7e\010\uff7e\011\uff7e\012" +
    "\uff7e\013\uff7e\014\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e" +
    "\022\uff7e\023\uff7e\024\uff7e\025\uff7e\070\uff7e\071\uff7e\072" +
    "\uff7e\076\uff7e\107\uff7e\110\uff7e\111\uff7e\112\uff7e\116\uff7e" +
    "\001\002\000\004\066\u01f5\001\002\000\004\062\u01f4\001" +
    "\002\000\062\005\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d" +
    "\013\uff7d\014\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022" +
    "\uff7d\023\uff7d\024\uff7d\025\uff7d\070\uff7d\071\uff7d\072\uff7d" +
    "\076\uff7d\107\uff7d\110\uff7d\111\uff7d\112\uff7d\116\uff7d\001" +
    "\002\000\004\062\u01f6\001\002\000\062\005\uff7c\007\uff7c" +
    "\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\016\uff7c\017" +
    "\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c" +
    "\070\uff7c\071\uff7c\072\uff7c\076\uff7c\107\uff7c\110\uff7c\111" +
    "\uff7c\112\uff7c\116\uff7c\001\002\000\062\005\uff7f\007\uff7f" +
    "\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\016\uff7f\017" +
    "\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f" +
    "\070\uff7f\071\uff7f\072\uff7f\076\uff7f\107\uff7f\110\uff7f\111" +
    "\uff7f\112\uff7f\116\uff7f\001\002\000\062\005\uff80\007\uff80" +
    "\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\016\uff80\017" +
    "\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80" +
    "\070\uff80\071\uff80\072\uff80\076\uff80\107\uff80\110\uff80\111" +
    "\uff80\112\uff80\116\uff80\001\002\000\062\005\uff79\007\uff79" +
    "\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\016\uff79\017" +
    "\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79" +
    "\070\uff79\071\uff79\072\uff79\076\uff79\107\uff79\110\uff79\111" +
    "\uff79\112\uff79\116\uff79\001\002\000\004\062\u01fd\001\002" +
    "\000\004\062\u01fc\001\002\000\062\005\uff73\007\uff73\010" +
    "\uff73\011\uff73\012\uff73\013\uff73\014\uff73\016\uff73\017\uff73" +
    "\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\070" +
    "\uff73\071\uff73\072\uff73\076\uff73\107\uff73\110\uff73\111\uff73" +
    "\112\uff73\116\uff73\001\002\000\062\005\uff78\007\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\014\uff78\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78\070" +
    "\uff78\071\uff78\072\uff78\076\uff78\107\uff78\110\uff78\111\uff78" +
    "\112\uff78\116\uff78\001\002\000\004\062\u0201\001\002\000" +
    "\004\062\u0200\001\002\000\062\005\uff71\007\uff71\010\uff71" +
    "\011\uff71\012\uff71\013\uff71\014\uff71\016\uff71\017\uff71\020" +
    "\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\070\uff71" +
    "\071\uff71\072\uff71\076\uff71\107\uff71\110\uff71\111\uff71\112" +
    "\uff71\116\uff71\001\002\000\062\005\uff76\007\uff76\010\uff76" +
    "\011\uff76\012\uff76\013\uff76\014\uff76\016\uff76\017\uff76\020" +
    "\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76\070\uff76" +
    "\071\uff76\072\uff76\076\uff76\107\uff76\110\uff76\111\uff76\112" +
    "\uff76\116\uff76\001\002\000\062\005\uff7a\007\uff7a\010\uff7a" +
    "\011\uff7a\012\uff7a\013\uff7a\014\uff7a\016\uff7a\017\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\070\uff7a" +
    "\071\uff7a\072\uff7a\076\uff7a\107\uff7a\110\uff7a\111\uff7a\112" +
    "\uff7a\116\uff7a\001\002\000\004\062\u0206\001\002\000\004" +
    "\062\u0205\001\002\000\062\005\uff6f\007\uff6f\010\uff6f\011" +
    "\uff6f\012\uff6f\013\uff6f\014\uff6f\016\uff6f\017\uff6f\020\uff6f" +
    "\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\070\uff6f\071" +
    "\uff6f\072\uff6f\076\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f" +
    "\116\uff6f\001\002\000\062\005\uff74\007\uff74\010\uff74\011" +
    "\uff74\012\uff74\013\uff74\014\uff74\016\uff74\017\uff74\020\uff74" +
    "\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\070\uff74\071" +
    "\uff74\072\uff74\076\uff74\107\uff74\110\uff74\111\uff74\112\uff74" +
    "\116\uff74\001\002\000\004\062\u020a\001\002\000\004\062" +
    "\u0209\001\002\000\062\005\uff72\007\uff72\010\uff72\011\uff72" +
    "\012\uff72\013\uff72\014\uff72\016\uff72\017\uff72\020\uff72\021" +
    "\uff72\022\uff72\023\uff72\024\uff72\025\uff72\070\uff72\071\uff72" +
    "\072\uff72\076\uff72\107\uff72\110\uff72\111\uff72\112\uff72\116" +
    "\uff72\001\002\000\062\005\uff77\007\uff77\010\uff77\011\uff77" +
    "\012\uff77\013\uff77\014\uff77\016\uff77\017\uff77\020\uff77\021" +
    "\uff77\022\uff77\023\uff77\024\uff77\025\uff77\070\uff77\071\uff77" +
    "\072\uff77\076\uff77\107\uff77\110\uff77\111\uff77\112\uff77\116" +
    "\uff77\001\002\000\004\062\u020e\001\002\000\004\062\u020d" +
    "\001\002\000\062\005\uff70\007\uff70\010\uff70\011\uff70\012" +
    "\uff70\013\uff70\014\uff70\016\uff70\017\uff70\020\uff70\021\uff70" +
    "\022\uff70\023\uff70\024\uff70\025\uff70\070\uff70\071\uff70\072" +
    "\uff70\076\uff70\107\uff70\110\uff70\111\uff70\112\uff70\116\uff70" +
    "\001\002\000\062\005\uff75\007\uff75\010\uff75\011\uff75\012" +
    "\uff75\013\uff75\014\uff75\016\uff75\017\uff75\020\uff75\021\uff75" +
    "\022\uff75\023\uff75\024\uff75\025\uff75\070\uff75\071\uff75\072" +
    "\uff75\076\uff75\107\uff75\110\uff75\111\uff75\112\uff75\116\uff75" +
    "\001\002\000\010\026\u0212\062\u0210\107\u0211\001\002\000" +
    "\062\005\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\070\uffaf\071\uffaf\072\uffaf\076\uffaf" +
    "\107\uffaf\110\uffaf\111\uffaf\112\uffaf\116\uffaf\001\002\000" +
    "\010\026\u026a\062\u0268\107\u0269\001\002\000\006\107\u0214" +
    "\114\u0213\001\002\000\022\027\u023d\030\u023b\031\u023f\032" +
    "\u0238\033\u023a\062\u0239\063\u023c\107\u023e\001\002\000\014" +
    "\027\u0218\030\u0217\031\u0219\032\u0215\033\u0216\001\002\000" +
    "\006\107\u0233\114\u0232\001\002\000\006\107\u022d\114\u022c" +
    "\001\002\000\006\107\u0227\114\u0226\001\002\000\006\107" +
    "\u0221\114\u0220\001\002\000\006\107\u021b\114\u021a\001\002" +
    "\000\004\063\u021d\001\002\000\004\062\u021c\001\002\000" +
    "\062\005\uff61\007\uff61\010\uff61\011\uff61\012\uff61\013\uff61" +
    "\014\uff61\016\uff61\017\uff61\020\uff61\021\uff61\022\uff61\023" +
    "\uff61\024\uff61\025\uff61\070\uff61\071\uff61\072\uff61\076\uff61" +
    "\107\uff61\110\uff61\111\uff61\112\uff61\116\uff61\001\002\000" +
    "\004\114\u021e\001\002\000\004\062\u021f\001\002\000\062" +
    "\005\uff63\007\uff63\010\uff63\011\uff63\012\uff63\013\uff63\014" +
    "\uff63\016\uff63\017\uff63\020\uff63\021\uff63\022\uff63\023\uff63" +
    "\024\uff63\025\uff63\070\uff63\071\uff63\072\uff63\076\uff63\107" +
    "\uff63\110\uff63\111\uff63\112\uff63\116\uff63\001\002\000\004" +
    "\063\u0223\001\002\000\004\062\u0222\001\002\000\062\005" +
    "\uff67\007\uff67\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67" +
    "\016\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024" +
    "\uff67\025\uff67\070\uff67\071\uff67\072\uff67\076\uff67\107\uff67" +
    "\110\uff67\111\uff67\112\uff67\116\uff67\001\002\000\004\114" +
    "\u0224\001\002\000\004\062\u0225\001\002\000\062\005\uff68" +
    "\007\uff68\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\016" +
    "\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68\024\uff68" +
    "\025\uff68\070\uff68\071\uff68\072\uff68\076\uff68\107\uff68\110" +
    "\uff68\111\uff68\112\uff68\116\uff68\001\002\000\004\063\u0229" +
    "\001\002\000\004\062\u0228\001\002\000\062\005\uff64\007" +
    "\uff64\010\uff64\011\uff64\012\uff64\013\uff64\014\uff64\016\uff64" +
    "\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025" +
    "\uff64\070\uff64\071\uff64\072\uff64\076\uff64\107\uff64\110\uff64" +
    "\111\uff64\112\uff64\116\uff64\001\002\000\004\114\u022a\001" +
    "\002\000\004\062\u022b\001\002\000\062\005\uff65\007\uff65" +
    "\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65\016\uff65\017" +
    "\uff65\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65" +
    "\070\uff65\071\uff65\072\uff65\076\uff65\107\uff65\110\uff65\111" +
    "\uff65\112\uff65\116\uff65\001\002\000\004\063\u022f\001\002" +
    "\000\004\062\u022e\001\002\000\062\005\uff5b\007\uff5b\010" +
    "\uff5b\011\uff5b\012\uff5b\013\uff5b\014\uff5b\016\uff5b\017\uff5b" +
    "\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\070" +
    "\uff5b\071\uff5b\072\uff5b\076\uff5b\107\uff5b\110\uff5b\111\uff5b" +
    "\112\uff5b\116\uff5b\001\002\000\004\114\u0230\001\002\000" +
    "\004\062\u0231\001\002\000\062\005\uff5c\007\uff5c\010\uff5c" +
    "\011\uff5c\012\uff5c\013\uff5c\014\uff5c\016\uff5c\017\uff5c\020" +
    "\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\070\uff5c" +
    "\071\uff5c\072\uff5c\076\uff5c\107\uff5c\110\uff5c\111\uff5c\112" +
    "\uff5c\116\uff5c\001\002\000\004\063\u0235\001\002\000\004" +
    "\062\u0234\001\002\000\062\005\uff5e\007\uff5e\010\uff5e\011" +
    "\uff5e\012\uff5e\013\uff5e\014\uff5e\016\uff5e\017\uff5e\020\uff5e" +
    "\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\070\uff5e\071" +
    "\uff5e\072\uff5e\076\uff5e\107\uff5e\110\uff5e\111\uff5e\112\uff5e" +
    "\116\uff5e\001\002\000\004\114\u0236\001\002\000\004\062" +
    "\u0237\001\002\000\062\005\uff60\007\uff60\010\uff60\011\uff60" +
    "\012\uff60\013\uff60\014\uff60\016\uff60\017\uff60\020\uff60\021" +
    "\uff60\022\uff60\023\uff60\024\uff60\025\uff60\070\uff60\071\uff60" +
    "\072\uff60\076\uff60\107\uff60\110\uff60\111\uff60\112\uff60\116" +
    "\uff60\001\002\000\004\114\u0266\001\002\000\062\005\uffae" +
    "\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\070\uffae\071\uffae\072\uffae\076\uffae\107\uffae\110" +
    "\uffae\111\uffae\112\uffae\116\uffae\001\002\000\004\114\u0264" +
    "\001\002\000\004\114\u0262\001\002\000\004\114\u0252\001" +
    "\002\000\004\114\u0250\001\002\000\010\026\u0244\062\u0242" +
    "\107\u0243\001\002\000\004\114\u0240\001\002\000\004\062" +
    "\u0241\001\002\000\062\005\uff6c\007\uff6c\010\uff6c\011\uff6c" +
    "\012\uff6c\013\uff6c\014\uff6c\016\uff6c\017\uff6c\020\uff6c\021" +
    "\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\070\uff6c\071\uff6c" +
    "\072\uff6c\076\uff6c\107\uff6c\110\uff6c\111\uff6c\112\uff6c\116" +
    "\uff6c\001\002\000\062\005\uffac\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\070\uffac\071\uffac" +
    "\072\uffac\076\uffac\107\uffac\110\uffac\111\uffac\112\uffac\116" +
    "\uffac\001\002\000\006\026\u024d\062\u024c\001\002\000\004" +
    "\114\u0245\001\002\000\006\062\u0246\107\u0247\001\002\000" +
    "\062\005\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\070\uffaa\071\uffaa\072\uffaa\076\uffaa" +
    "\107\uffaa\110\uffaa\111\uffaa\112\uffaa\116\uffaa\001\002\000" +
    "\006\026\u0249\062\u0248\001\002\000\062\005\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\076\uffa5\107\uffa5\110\uffa5\111" +
    "\uffa5\112\uffa5\116\uffa5\001\002\000\004\114\u024a\001\002" +
    "\000\004\062\u024b\001\002\000\062\005\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\070" +
    "\uffa2\071\uffa2\072\uffa2\076\uffa2\107\uffa2\110\uffa2\111\uffa2" +
    "\112\uffa2\116\uffa2\001\002\000\062\005\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\076\uffa7\107\uffa7\110\uffa7\111\uffa7" +
    "\112\uffa7\116\uffa7\001\002\000\004\114\u024e\001\002\000" +
    "\004\062\u024f\001\002\000\062\005\uffa4\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\014\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\076\uffa4\107\uffa4\110\uffa4\111\uffa4\112" +
    "\uffa4\116\uffa4\001\002\000\004\062\u0251\001\002\000\062" +
    "\005\uff6e\007\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e\014" +
    "\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e" +
    "\024\uff6e\025\uff6e\070\uff6e\071\uff6e\072\uff6e\076\uff6e\107" +
    "\uff6e\110\uff6e\111\uff6e\112\uff6e\116\uff6e\001\002\000\014" +
    "\027\u0256\030\u0255\031\u0257\032\u0253\033\u0254\001\002\000" +
    "\004\107\u0260\001\002\000\004\107\u025e\001\002\000\004" +
    "\107\u025c\001\002\000\004\107\u025a\001\002\000\004\107" +
    "\u0258\001\002\000\004\062\u0259\001\002\000\062\005\uff62" +
    "\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62\016" +
    "\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62" +
    "\025\uff62\070\uff62\071\uff62\072\uff62\076\uff62\107\uff62\110" +
    "\uff62\111\uff62\112\uff62\116\uff62\001\002\000\004\062\u025b" +
    "\001\002\000\062\005\uff69\007\uff69\010\uff69\011\uff69\012" +
    "\uff69\013\uff69\014\uff69\016\uff69\017\uff69\020\uff69\021\uff69" +
    "\022\uff69\023\uff69\024\uff69\025\uff69\070\uff69\071\uff69\072" +
    "\uff69\076\uff69\107\uff69\110\uff69\111\uff69\112\uff69\116\uff69" +
    "\001\002\000\004\062\u025d\001\002\000\062\005\uff66\007" +
    "\uff66\010\uff66\011\uff66\012\uff66\013\uff66\014\uff66\016\uff66" +
    "\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025" +
    "\uff66\070\uff66\071\uff66\072\uff66\076\uff66\107\uff66\110\uff66" +
    "\111\uff66\112\uff66\116\uff66\001\002\000\004\062\u025f\001" +
    "\002\000\062\005\uff5d\007\uff5d\010\uff5d\011\uff5d\012\uff5d" +
    "\013\uff5d\014\uff5d\016\uff5d\017\uff5d\020\uff5d\021\uff5d\022" +
    "\uff5d\023\uff5d\024\uff5d\025\uff5d\070\uff5d\071\uff5d\072\uff5d" +
    "\076\uff5d\107\uff5d\110\uff5d\111\uff5d\112\uff5d\116\uff5d\001" +
    "\002\000\004\062\u0261\001\002\000\062\005\uff5f\007\uff5f" +
    "\010\uff5f\011\uff5f\012\uff5f\013\uff5f\014\uff5f\016\uff5f\017" +
    "\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f" +
    "\070\uff5f\071\uff5f\072\uff5f\076\uff5f\107\uff5f\110\uff5f\111" +
    "\uff5f\112\uff5f\116\uff5f\001\002\000\004\062\u0263\001\002" +
    "\000\062\005\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013" +
    "\uff6d\014\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d" +
    "\023\uff6d\024\uff6d\025\uff6d\070\uff6d\071\uff6d\072\uff6d\076" +
    "\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d\116\uff6d\001\002" +
    "\000\004\062\u0265\001\002\000\062\005\uff6a\007\uff6a\010" +
    "\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\016\uff6a\017\uff6a" +
    "\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\070" +
    "\uff6a\071\uff6a\072\uff6a\076\uff6a\107\uff6a\110\uff6a\111\uff6a" +
    "\112\uff6a\116\uff6a\001\002\000\004\062\u0267\001\002\000" +
    "\062\005\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\023" +
    "\uff6b\024\uff6b\025\uff6b\070\uff6b\071\uff6b\072\uff6b\076\uff6b" +
    "\107\uff6b\110\uff6b\111\uff6b\112\uff6b\116\uff6b\001\002\000" +
    "\062\005\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\070\uffad\071\uffad\072\uffad\076\uffad" +
    "\107\uffad\110\uffad\111\uffad\112\uffad\116\uffad\001\002\000" +
    "\006\026\u0273\062\u0272\001\002\000\004\114\u026b\001\002" +
    "\000\006\062\u026c\107\u026d\001\002\000\062\005\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\070\uffab\071\uffab\072\uffab\076\uffab\107\uffab\110\uffab" +
    "\111\uffab\112\uffab\116\uffab\001\002\000\006\026\u026f\062" +
    "\u026e\001\002\000\062\005\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\076\uffa8\107\uffa8\110\uffa8\111\uffa8\112\uffa8\116" +
    "\uffa8\001\002\000\004\114\u0270\001\002\000\004\062\u0271" +
    "\001\002\000\062\005\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\070\uffa3\071\uffa3\072" +
    "\uffa3\076\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3\116\uffa3" +
    "\001\002\000\062\005\uffa9\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\070\uffa9\071\uffa9\072" +
    "\uffa9\076\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9\116\uffa9" +
    "\001\002\000\004\114\u0274\001\002\000\004\062\u0275\001" +
    "\002\000\062\005\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\070\uffa6\071\uffa6\072\uffa6" +
    "\076\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\116\uffa6\001" +
    "\002\000\010\026\u0279\062\u0277\107\u0278\001\002\000\062" +
    "\005\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014" +
    "\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86" +
    "\024\uff86\025\uff86\070\uff86\071\uff86\072\uff86\076\uff86\107" +
    "\uff86\110\uff86\111\uff86\112\uff86\116\uff86\001\002\000\006" +
    "\026\u0282\062\u0281\001\002\000\006\047\226\050\223\001" +
    "\002\000\006\062\u027b\107\u027c\001\002\000\062\005\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\016" +
    "\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85" +
    "\025\uff85\070\uff85\071\uff85\072\uff85\076\uff85\107\uff85\110" +
    "\uff85\111\uff85\112\uff85\116\uff85\001\002\000\006\026\u027e" +
    "\062\u027d\001\002\000\062\005\uff83\007\uff83\010\uff83\011" +
    "\uff83\012\uff83\013\uff83\014\uff83\016\uff83\017\uff83\020\uff83" +
    "\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\070\uff83\071" +
    "\uff83\072\uff83\076\uff83\107\uff83\110\uff83\111\uff83\112\uff83" +
    "\116\uff83\001\002\000\006\047\226\050\223\001\002\000" +
    "\004\062\u0280\001\002\000\062\005\uff81\007\uff81\010\uff81" +
    "\011\uff81\012\uff81\013\uff81\014\uff81\016\uff81\017\uff81\020" +
    "\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\070\uff81" +
    "\071\uff81\072\uff81\076\uff81\107\uff81\110\uff81\111\uff81\112" +
    "\uff81\116\uff81\001\002\000\062\005\uff84\007\uff84\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\014\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\070\uff84" +
    "\071\uff84\072\uff84\076\uff84\107\uff84\110\uff84\111\uff84\112" +
    "\uff84\116\uff84\001\002\000\006\047\226\050\223\001\002" +
    "\000\004\062\u0284\001\002\000\062\005\uff82\007\uff82\010" +
    "\uff82\011\uff82\012\uff82\013\uff82\014\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\070" +
    "\uff82\071\uff82\072\uff82\076\uff82\107\uff82\110\uff82\111\uff82" +
    "\112\uff82\116\uff82\001\002\000\004\002\uffed\001\002\000" +
    "\006\017\u0288\107\u0289\001\002\000\004\074\u02a4\001\002" +
    "\000\004\107\u029d\001\002\000\004\026\u028a\001\002\000" +
    "\004\114\u028b\001\002\000\004\062\u028c\001\002\000\012" +
    "\046\227\047\226\050\223\107\230\001\002\000\004\062" +
    "\u028e\001\002\000\010\051\u0290\052\u0292\107\u0291\001\002" +
    "\000\004\074\uff1b\001\002\000\004\107\u029c\001\002\000" +
    "\010\026\u0296\051\u0294\052\u0295\001\002\000\004\107\u0293" +
    "\001\002\000\004\074\uff15\001\002\000\004\074\uff18\001" +
    "\002\000\004\074\uff17\001\002\000\004\114\u0297\001\002" +
    "\000\006\027\u0299\030\u0298\001\002\000\004\114\u029b\001" +
    "\002\000\004\114\u029a\001\002\000\004\074\uff1a\001\002" +
    "\000\004\074\uff19\001\002\000\004\074\uff16\001\002\000" +
    "\004\026\u029e\001\002\000\004\114\u029f\001\002\000\004" +
    "\062\u02a0\001\002\000\012\046\227\047\226\050\223\107" +
    "\230\001\002\000\004\062\u02a2\001\002\000\010\051\u0290" +
    "\052\u0292\107\u0291\001\002\000\004\074\uff1c\001\002\000" +
    "\004\075\u02a5\001\002\000\046\005\141\010\151\011\112" +
    "\012\144\016\134\017\111\020\122\021\133\022\140\023" +
    "\136\024\137\025\121\070\142\071\132\107\125\110\146" +
    "\111\152\112\135\001\002\000\052\005\141\007\302\010" +
    "\151\011\112\012\144\016\134\017\111\020\122\021\133" +
    "\022\140\023\136\024\137\025\121\070\142\071\132\076" +
    "\u02a7\107\125\110\146\111\152\112\135\001\002\000\062" +
    "\005\uff1d\007\uff1d\010\uff1d\011\uff1d\012\uff1d\013\uff1d\014" +
    "\uff1d\016\uff1d\017\uff1d\020\uff1d\021\uff1d\022\uff1d\023\uff1d" +
    "\024\uff1d\025\uff1d\070\uff1d\071\uff1d\072\uff1d\076\uff1d\107" +
    "\uff1d\110\uff1d\111\uff1d\112\uff1d\116\uff1d\001\002\000\004" +
    "\106\u02a9\001\002\000\004\062\u02aa\001\002\000\010\017" +
    "\ufffd\101\ufffd\102\ufffd\001\002\000\004\102\u02bb\001\002" +
    "\000\004\102\u02b4\001\002\000\004\073\u02ae\001\002\000" +
    "\004\074\u02af\001\002\000\004\075\u02b0\001\002\000\050" +
    "\005\141\010\151\011\112\012\144\016\134\017\111\020" +
    "\122\021\133\022\140\023\136\024\137\025\121\070\142" +
    "\071\132\076\u02b2\107\125\110\146\111\152\112\135\001" +
    "\002\000\052\005\141\007\302\010\151\011\112\012\144" +
    "\016\134\017\111\020\122\021\133\022\140\023\136\024" +
    "\137\025\121\070\142\071\132\076\u02b3\107\125\110\146" +
    "\111\152\112\135\001\002\000\004\002\uffe4\001\002\000" +
    "\004\002\uffe5\001\002\000\004\073\u02b5\001\002\000\004" +
    "\074\u02b6\001\002\000\004\075\u02b7\001\002\000\050\005" +
    "\141\010\151\011\112\012\144\016\134\017\111\020\122" +
    "\021\133\022\140\023\136\024\137\025\121\070\142\071" +
    "\132\076\u02b9\107\125\110\146\111\152\112\135\001\002" +
    "\000\052\005\141\007\302\010\151\011\112\012\144\016" +
    "\134\017\111\020\122\021\133\022\140\023\136\024\137" +
    "\025\121\070\142\071\132\076\u02ba\107\125\110\146\111" +
    "\152\112\135\001\002\000\004\002\uffe6\001\002\000\004" +
    "\002\uffe7\001\002\000\004\073\u02bc\001\002\000\004\074" +
    "\u02bd\001\002\000\004\075\u02be\001\002\000\052\005\141" +
    "\010\151\011\112\012\144\016\134\017\111\020\122\021" +
    "\133\022\140\023\136\024\137\025\121\070\142\071\132" +
    "\072\u02c1\076\u02bf\107\125\110\146\111\152\112\135\001" +
    "\002\000\004\002\uffe2\001\002\000\054\005\141\007\302" +
    "\010\151\011\112\012\144\016\134\017\111\020\122\021" +
    "\133\022\140\023\136\024\137\025\121\070\142\071\132" +
    "\072\u02c1\076\u02cb\107\125\110\146\111\152\112\135\001" +
    "\002\000\010\066\u02c6\107\u02c7\114\u02c5\001\002\000\004" +
    "\062\u02c3\001\002\000\004\076\u02c4\001\002\000\004\002" +
    "\uffe0\001\002\000\004\062\uffdd\001\002\000\032\015\166" +
    "\026\165\027\163\030\172\031\157\032\162\033\173\063" +
    "\161\065\160\066\u02c9\107\164\114\171\001\002\000\004" +
    "\062\uffde\001\002\000\004\066\u02ca\001\002\000\004\062" +
    "\uffdc\001\002\000\004\062\uffdb\001\002\000\004\002\uffe3" +
    "\001\002\000\004\062\u02cd\001\002\000\004\076\u02ce\001" +
    "\002\000\004\002\uffe1\001\002\000\004\073\u02d0\001\002" +
    "\000\004\074\u02d1\001\002\000\004\075\u02d2\001\002\000" +
    "\052\005\141\010\151\011\112\012\144\016\134\017\111" +
    "\020\122\021\133\022\140\023\136\024\137\025\121\070" +
    "\142\071\132\072\u02c1\076\u02d3\107\125\110\146\111\152" +
    "\112\135\001\002\000\004\002\uffea\001\002\000\054\005" +
    "\141\007\302\010\151\011\112\012\144\016\134\017\111" +
    "\020\122\021\133\022\140\023\136\024\137\025\121\070" +
    "\142\071\132\072\u02c1\076\u02d8\107\125\110\146\111\152" +
    "\112\135\001\002\000\004\062\u02d6\001\002\000\004\076" +
    "\u02d7\001\002\000\004\002\uffe8\001\002\000\004\002\uffeb" +
    "\001\002\000\004\062\u02da\001\002\000\004\076\u02db\001" +
    "\002\000\004\002\uffe9\001\002\000\004\073\u02dd\001\002" +
    "\000\004\074\u02de\001\002\000\004\075\u02df\001\002\000" +
    "\050\005\141\010\151\011\112\012\144\016\134\017\111" +
    "\020\122\021\133\022\140\023\136\024\137\025\121\070" +
    "\142\071\132\076\u02e1\107\125\110\146\111\152\112\135" +
    "\001\002\000\052\005\141\007\302\010\151\011\112\012" +
    "\144\016\134\017\111\020\122\021\133\022\140\023\136" +
    "\024\137\025\121\070\142\071\132\076\u02e2\107\125\110" +
    "\146\111\152\112\135\001\002\000\004\002\uffee\001\002" +
    "\000\004\002\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02e0\000\006\002\010\010\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\117" +
    "\004\115\006\125\007\130\013\144\014\112\015\113\017" +
    "\147\022\122\023\142\026\127\030\114\033\116\035\146" +
    "\036\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\271\006\274\007" +
    "\277\013\144\014\266\015\267\016\300\017\303\022\122" +
    "\023\142\026\276\030\270\033\272\035\302\036\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\155" +
    "\031\166\040\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\177\001\001\000\004\040\200\001\001\000\004\040" +
    "\201\001\001\000\004\040\202\001\001\000\004\040\203" +
    "\001\001\000\004\040\204\001\001\000\004\040\205\001" +
    "\001\000\002\001\001\000\006\012\207\040\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\212\040" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\224\025\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\253" +
    "\001\001\000\004\025\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\265\004\115\006\125\007\130\013\144" +
    "\014\112\015\113\017\147\022\122\023\142\026\127\030" +
    "\114\033\116\035\146\036\123\001\001\000\040\004\271" +
    "\006\274\007\277\013\144\014\266\015\267\016\300\017" +
    "\303\022\122\023\142\026\276\030\270\033\272\035\302" +
    "\036\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\305\004\115\006\125\007\130\013\144\014\112\015\113" +
    "\017\147\022\122\023\142\026\127\030\114\033\116\035" +
    "\146\036\123\001\001\000\040\004\271\006\274\007\277" +
    "\013\144\014\266\015\267\016\300\017\303\022\122\023" +
    "\142\026\276\030\270\033\272\035\302\036\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\311\025" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\320\027\321\040\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\326\040\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\331\040" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\366\004\115\006\125\007" +
    "\130\013\144\014\112\015\113\017\147\022\122\023\142" +
    "\026\127\030\114\033\116\035\146\036\123\001\001\000" +
    "\040\004\271\006\274\007\277\013\144\014\266\015\267" +
    "\016\300\017\303\022\122\023\142\026\276\030\270\033" +
    "\272\035\302\036\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\366\004\115\006\125\007\130\013" +
    "\144\014\112\015\113\017\147\022\122\023\142\026\127" +
    "\030\114\033\116\035\146\036\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\366\004\115\006\125" +
    "\007\130\013\144\014\112\015\113\017\147\022\122\023" +
    "\142\026\127\030\114\033\116\035\146\036\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\u0102\004\115\006\125\007\130" +
    "\013\144\014\112\015\113\017\147\022\122\023\142\026" +
    "\127\030\114\033\116\035\146\036\123\001\001\000\040" +
    "\004\271\006\274\007\277\013\144\014\266\015\267\016" +
    "\300\017\303\022\122\023\142\026\276\030\270\033\272" +
    "\035\302\036\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\u0108" +
    "\004\115\006\125\007\130\013\144\014\112\015\113\017" +
    "\147\022\122\023\142\026\127\030\114\033\116\035\146" +
    "\036\123\001\001\000\040\004\271\006\274\007\277\013" +
    "\144\014\266\015\267\016\300\017\303\022\122\023\142" +
    "\026\276\030\270\033\272\035\302\036\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\u0162" +
    "\001\001\000\006\012\u016e\040\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\u0166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\u0169\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\u016c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\u0172\025\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\u0175\004\115\006\125\007\130\013\144" +
    "\014\112\015\113\017\147\022\122\023\142\026\127\030" +
    "\114\033\116\035\146\036\123\001\001\000\040\004\271" +
    "\006\274\007\277\013\144\014\266\015\267\016\300\017" +
    "\303\022\122\023\142\026\276\030\270\033\272\035\302" +
    "\036\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\u0179\004\115\006\125\007\130\013\144\014\112" +
    "\015\113\017\147\022\122\023\142\026\127\030\114\033" +
    "\116\035\146\036\123\001\001\000\040\004\271\006\274" +
    "\007\277\013\144\014\266\015\267\016\300\017\303\022" +
    "\122\023\142\026\276\030\270\033\272\035\302\036\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0188" +
    "\040\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u0185\040\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0198" +
    "\040\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u019e\040\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u01a4\040\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u01bc\040\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\u01b9\040\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u01cc\040" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\u01d2\040\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\u01d8\040\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u01e2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u01ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u01f1\040\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\u0279\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u027e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u0282\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u0286\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\u028c\025\223\001" +
    "\001\000\002\001\001\000\004\005\u028e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\u02a0\025\223\001\001\000\002\001\001" +
    "\000\004\005\u02a2\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\u02a5\004\115\006\125\007\130\013\144" +
    "\014\112\015\113\017\147\022\122\023\142\026\127\030" +
    "\114\033\116\035\146\036\123\001\001\000\040\004\271" +
    "\006\274\007\277\013\144\014\266\015\267\016\300\017" +
    "\303\022\122\023\142\026\276\030\270\033\272\035\302" +
    "\036\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\u02b0\004\115\006\125\007\130\013\144" +
    "\014\112\015\113\017\147\022\122\023\142\026\127\030" +
    "\114\033\116\035\146\036\123\001\001\000\040\004\271" +
    "\006\274\007\277\013\144\014\266\015\267\016\300\017" +
    "\303\022\122\023\142\026\276\030\270\033\272\035\302" +
    "\036\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\u02b7\004\115\006\125\007\130\013\144\014\112\015" +
    "\113\017\147\022\122\023\142\026\127\030\114\033\116" +
    "\035\146\036\123\001\001\000\040\004\271\006\274\007" +
    "\277\013\144\014\266\015\267\016\300\017\303\022\122" +
    "\023\142\026\276\030\270\033\272\035\302\036\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\u02bf\004" +
    "\115\006\125\007\130\011\u02c1\013\144\014\112\015\113" +
    "\017\147\022\122\023\142\026\127\030\114\033\116\035" +
    "\146\036\123\001\001\000\002\001\001\000\042\004\271" +
    "\006\274\007\277\011\u02cb\013\144\014\266\015\267\016" +
    "\300\017\303\022\122\023\142\026\276\030\270\033\272" +
    "\035\302\036\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u02c7\040\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\u02d3\004\115\006\125\007\130\011\u02d4\013" +
    "\144\014\112\015\113\017\147\022\122\023\142\026\127" +
    "\030\114\033\116\035\146\036\123\001\001\000\002\001" +
    "\001\000\042\004\271\006\274\007\277\011\u02d8\013\144" +
    "\014\266\015\267\016\300\017\303\022\122\023\142\026" +
    "\276\030\270\033\272\035\302\036\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\u02df\004\115\006\125\007\130\013\144\014\112" +
    "\015\113\017\147\022\122\023\142\026\127\030\114\033" +
    "\116\035\146\036\123\001\001\000\040\004\271\006\274" +
    "\007\277\013\144\014\266\015\267\016\300\017\303\022" +
    "\122\023\142\026\276\030\270\033\272\035\302\036\273" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // SENTENCIA_COUT ::= Comillas TEXTO Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // SENTENCIA_COUT ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // SENTENCIA_COUT ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // COUT ::= Cout Op_desIzq SENTENCIA_COUT Op_desIzq SENTENCIA_COUT Op_desIzq SENTENCIA_COUT Op_desIzq SENTENCIA_COUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // COUT ::= Cout Op_desIzq SENTENCIA_COUT Op_desIzq SENTENCIA_COUT Op_desIzq SENTENCIA_COUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // COUT ::= Cout Op_desIzq SENTENCIA_COUT Op_desIzq SENTENCIA_COUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // COUT ::= Cout Op_desIzq SENTENCIA_COUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CIN ::= Cin Op_desDer Identificador Op_desDer SENTENCIA_CIN P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CIN ::= Cin Op_desDer Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // CIN ::= Cin Op_desDer P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // SENTENCIA_SCANF ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SCANF",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // SCANF ::= Scanf Parent_a Comillas SENTENCIA_SCANF Comillas Op_andB TEXTO Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // SCANF ::= Scanf Parent_a Comillas SENTENCIA_SCANF Comillas TEXTO Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // SCANF ::= Scanf Parent_a Comillas SENTENCIA_SCANF Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // SCANF ::= Scanf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // SCANF ::= Scanf Parent_a Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // SENTENCIA_SWITCH ::= Default DPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // SENTENCIA_SWITCH ::= Case Identificador DPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // SENTENCIA_SWITCH ::= Case Identificador DPuntos Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // SENTENCIA_SWITCH ::= Case Numero DPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // SENTENCIA_SWITCH ::= Case Numero DPuntos Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Default DPuntos P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH Default DPuntos P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH Default DPuntos P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a Default DPuntos P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // DEFINE ::= Define Identificador Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // DEFINE ::= Define Identificador Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // SENTENCIA_PRINTF ::= TEXTO Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // SENTENCIA_PRINTF ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Comillas TEXTO Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas TEXTO Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // PRINTF ::= Printf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // PRINTF ::= Printf Parent_a Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // DECLARACION_FOR ::= Op_decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // DECLARACION_FOR ::= Identificador Op_decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // DECLARACION_FOR ::= Identificador Igual Numero Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // DECLARACION_FOR ::= Identificador Igual Numero Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SENTENCIA_FOR ::= T_int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // OP_RELACIONAL ::= Op_andB 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // OP_RELACIONAL ::= Op_orB 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OP_RELACIONAL ::= Op_mayorE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OP_RELACIONAL ::= Op_menorE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OP_RELACIONAL ::= Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OP_RELACIONAL ::= Op_menor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // OP_RELACIONAL ::= Op_or 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // OP_RELACIONAL ::= Op_and 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // OP_RELACIONAL ::= Op_diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // OP_RELACIONAL ::= Op_igual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TRUE_FALSE ::= Op_boolFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TRUE_FALSE",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TRUE_FALSE ::= Op_boolTrue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TRUE_FALSE",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SENTENCIA_BOOLEANA ::= Op_not Identificador OP_RELACIONAL Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SENTENCIA_BOOLEANA ::= Op_not Identificador OP_RELACIONAL Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTENCIA_BOOLEANA ::= Op_not Identificador OP_RELACIONAL Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTENCIA_BOOLEANA ::= Op_not Identificador OP_RELACIONAL Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_BOOLEANA ::= Op_not Identificador OP_RELACIONAL TRUE_FALSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONAL TRUE_FALSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTENCIA_BOOLEANA ::= Op_not Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTENCIA_BOOLEANA ::= TRUE_FALSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTENCIA_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // T_DATO_FLOTANTE ::= T_double 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_FLOTANTE",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // T_DATO_FLOTANTE ::= T_float 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_FLOTANTE",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // T_DATO_ENTERO ::= T_byte 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_ENTERO",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // T_DATO_ENTERO ::= T_long 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_ENTERO",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // T_DATO_ENTERO ::= T_int 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO_ENTERO",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // DECLARACION_ARITMETICA ::= T_char Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DECLARACION_ARITMETICA ::= T_char Identificador Igual Identificador Suma Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // DECLARACION_ARITMETICA ::= T_char Identificador Igual Comillas TEXTO Comillas Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // DECLARACION_ARITMETICA ::= T_char Identificador Igual Comillas TEXTO Comillas Suma Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // DECLARACION_ARITMETICA ::= Cadena Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // DECLARACION_ARITMETICA ::= Cadena Identificador Igual Identificador Suma Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // DECLARACION_ARITMETICA ::= Cadena Identificador Igual Comillas TEXTO Comillas Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // DECLARACION_ARITMETICA ::= Cadena Identificador Igual Comillas TEXTO Comillas Suma Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Modulo Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Modulo Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Numero Modulo Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Numero Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Numero Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Numero Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Identificador Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Numero Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Numero Punto Numero Division Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Numero Punto Numero Multiplicacion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Numero Punto Numero Resta Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION_ARITMETICA ::= T_DATO_FLOTANTE Identificador Igual Numero Punto Numero Suma Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Modulo Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Modulo Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Punto Numero Modulo Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Punto Numero Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Division Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Punto Numero Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Multiplicacion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Resta Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Punto Numero Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Identificador Suma Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Punto Numero Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Modulo Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECLARACION_ARITMETICA ::= T_DATO_ENTERO Identificador Igual Numero Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARACION_ARITMETICA ::= Identificador Op_asigModulo Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARACION_ARITMETICA ::= Identificador Op_asigSuma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DECLARACION_ARITMETICA ::= Identificador Op_asigMult Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DECLARACION_ARITMETICA ::= Identificador Op_asigDiv Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION_ARITMETICA ::= Identificador Op_asigResta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION_ARITMETICA ::= Identificador Op_asigModulo Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DECLARACION_ARITMETICA ::= Identificador Op_asigSuma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARACION_ARITMETICA ::= Identificador Op_asigMult Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARACION_ARITMETICA ::= Identificador Op_asigDiv Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION_ARITMETICA ::= Identificador Op_asigResta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION_ARITMETICA ::= Identificador Op_decremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARACION_ARITMETICA ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARACION ::= DECLARACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARACION ::= Identificador Igual Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACION ::= Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARACION ::= Identificador Igual TRUE_FALSE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= T_bool Identificador Igual TRUE_FALSE Identificador Igual TRUE_FALSE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= T_bool Identificador Identificador Igual TRUE_FALSE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= T_bool Identificador Igual TRUE_FALSE Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= T_bool Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION ::= T_bool Identificador Igual TRUE_FALSE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION ::= T_bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION ::= T_char Identificador Igual Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION ::= T_char Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION ::= T_char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION ::= Cadena Identificador Igual Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION ::= T_char Identificador Igual Comillas TEXTO Comillas Identificador Igual Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION ::= T_char Identificador Identificador Igual Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION ::= T_char Identificador Igual Comillas TEXTO Comillas Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION ::= T_char Identificador Igual Comillas Comillas Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION ::= T_char Identificador Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION ::= T_char Identificador Igual Comillas Comillas Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= T_char Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= Cadena Identificador Igual Comillas TEXTO Comillas Identificador Igual Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION ::= Cadena Identificador Identificador Igual Comillas TEXTO Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= Cadena Identificador Igual Comillas TEXTO Comillas Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= Cadena Identificador Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= Cadena Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= T_DATO_FLOTANTE Identificador Igual Numero Punto Numero Identificador Numero Punto Numero Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION ::= T_DATO_FLOTANTE Identificador Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION ::= T_DATO_FLOTANTE Identificador Igual Numero Punto Numero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= T_DATO_FLOTANTE Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= T_DATO_FLOTANTE Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= T_DATO_FLOTANTE Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= T_DATO_FLOTANTE Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador Igual Numero Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador Igual Numero Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador Igual Numero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador Igual Numero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= T_DATO_ENTERO Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= T_DATO_ENTERO Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= T_DATO_ENTERO Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA ::= SENTENCIA DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IDENTIFICADORES ::= DPuntos 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IDENTIFICADORES ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IDENTIFICADORES ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IDENTIFICADORES ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IDENTIFICADORES ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IDENTIFICADORES ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IDENTIFICADORES ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IDENTIFICADORES ::= Back 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IDENTIFICADORES ::= Punto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IDENTIFICADORES ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TEXTO ::= IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TEXTO ::= IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TEXTO ::= IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TEXTO ::= IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TEXTO ::= IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TEXTO ::= IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTO ::= IDENTIFICADORES IDENTIFICADORES IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTO ::= IDENTIFICADORES IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TEXTO ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RETURN ::= Return Comillas TEXTO Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETURN ::= Return Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETURN ::= Return Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RETURN ::= Return Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a RETURN P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INICIO ::= LIBRERIAS T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INICIO ::= LIBRERIAS Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INICIO ::= LIBRERIAS Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INICIO ::= LIBRERIAS Void Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INICIO ::= LIBRERIAS Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INICIO ::= T_int Main Parent_a Parent_c Llave_a RETURN P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INICIO ::= T_int Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= Void Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Punto Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-15)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-13)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Punto Identificador Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-12)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LIBRERIAS ::= Include Op_menor Iostream Op_mayor Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Punto Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Punto Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIBRERIAS ::= Include Op_menor Iostream Op_mayor Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIAS ::= Include Op_menor Iostream Op_mayor Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIAS ::= Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= Include Op_menor Identificador Punto Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LIBRERIAS ::= Include Op_menor Identificador Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LIBRERIAS ::= Include Op_menor Iostream Op_mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

